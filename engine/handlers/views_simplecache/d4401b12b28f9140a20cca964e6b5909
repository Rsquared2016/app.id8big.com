//<script type="text/javascript">

	function news_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function news_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						news_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);//<script type="text/javascript">

	function gtask_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function gtask_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						gtask_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */
        $(document).ready(function() {
            $('#fancybox-content .popup_calendar').live('click', function(){
                $('body').find('#fancybox-content .popup_calendar').datepicker({ dateFormat: 'yy-mm-dd' });
                $('body').find('#fancybox-content .popup_calendar').datepicker('show');
            });
		});

	} //End Of Doc Ready
);//<script type="text/javascript">

	function events_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}
    
    // sets secondary titles width
    $('.ulListingTitle li').width($('.itemCol').width());
    $('body ul.ulListingTitle').width($('.itemListingCols').width());
    
    /* li hover for IE7 */
    $('ul.tabGeneric li').mouseenter(
    	function() {
    		$(this).addClass('hover');
    	}
    );
    $('ul.tabGeneric li').mouseleave(
    	function() {
    		$(this).removeClass('hover');
    	}
    );

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function events_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						events_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);//<script type="text/javascript">
     $(document).ready(
        function() {
            $('.ktFormWrapperGroup.bADateGroup .elgg-input-checkboxes input[type="checkbox"]').change(function() {
                if ($(this).is(':checked')) {
                    $('.ktFormWrapperGroup.bEDateGroup').hide();
                    $('.ktFormWrapperGroup.bEDateGroup.inline').hide();
                    $('.ktFormWrapperGroup.bADateGroup.inline').hide();
                } else {
                    $('.ktFormWrapperGroup.bEDateGroup').show();
                    $('.ktFormWrapperGroup.bEDateGroup.inline').show();
                    $('.ktFormWrapperGroup.bADateGroup.inline').show();
                }
            });
            $('.ktFormWrapperGroup.bADateGroup .elgg-input-checkboxes input[type="checkbox"]').change();
            
            $('select#user_timezone_group, select#timezone_group').change(function(event) {
                var value = $(this).val();
                
                if ($(this).attr('id') == 'user_timezone_group') {
                    switch(value) {
                        case 'united_states':
                            var opt = $('select#united_states option').clone();
                            $('select#user_timezone option').remove();
                            $('select#user_timezone').append(opt);
                            $('select#user_timezone').val('0');
                            break;
                        case 'all_the_world':
                            var opt = $('select#all_the_world option').clone();
                            $('select#user_timezone option').remove();
                            $('select#user_timezone').append(opt);
                            $('select#user_timezone').val('0');
                            break;
                    }
                }
                else {
                    switch(value) {
                        case 'united_states':
                            var opt = $('select#united_states option').clone();
                            $('select#timezone option').remove();
                            $('select#timezone').append(opt);
                            $('select#timezone').val('0');
                            break;
                        case 'all_the_world':
                            var opt = $('select#all_the_world option').clone();
                            $('select#timezone option').remove();
                            $('select#timezone').append(opt);
                            $('select#timezone').val('0');
                            break;
                    }
                }
            });
        }
        
    );

    
    //<script type="text/javascript">

	function meeting_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function meeting_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						meeting_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);//<script type="text/javascript">

	function gdrive_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function gdrive_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						gdrive_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);//<script type="text/javascript">

	function help_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function help_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						help_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);//<script type="text/javascript">

	function kt_polls_ktform_process_submit(element) {
		//Change to Sending...
		var submit = $('input[type=submit]', $(element));

		var savingTextDefault = 'Saving...';
		var savingText = $(submit).attr('rel');

		if(savingText == '' || savingText == undefined) {
			savingText = savingTextDefault;
		}

		//We should search for input[type=submit]
		$(submit).addClass('disabled').attr('disabled', 'disabled').val(savingText);

		//alert('hola');
		//return false;

	}

	function disable_submit(wrapper, input, text) {
		$(input, wrapper)
	}

    function make_align() {
        // sets container height for vertical alignment (aided by a table...)

		$('.search_listing_info').each(
		function() {
			var height_init = $('.infoListing').height();
			$(this).find('.itemCol').each(
			function() {
				if($(this).height() > height_init) {
					if($.browser.msie && (parseFloat(jQuery.browser.version) > 7)) {
						return;
					}
					else {
						height_init = $(this).height();
					}
				}
			}
		);
			$(this).find('.itemListingCols, .itemCol').height(height_init);
		}
	);

        //$('.itemListingCols').height(Math.max($('.infoListing').height(), $('.itemCol').height()));
        // sets secondary titles width
        $('.ulListingTitle li').width($('.itemCol').width());
    }

    // we put this outside document ready, so it works in IE8
    if($.browser.msie && (jQuery.browser.version == '8.0')) {
        make_align();
        /*$('.itemCol span').height($('.itemCol span').height()); // if we don't do this, IE8 won't align items vertically
        $('.aRectangle').height($('.aRectangle').height()); // if we don't do this, IE8 won't align items vertically */
    }
    // for any other browser, we act normally
    else {
        $(document).ready(
		function() {
			make_align();
		}
	);
    }

	/**
	 * Add a a query string to a url.
	 * @params url - A simple url.
	 * @params params - Query string, must begin without ? or &.
	 */
	function kt_polls_ktform_add_params_to_url(url, params) {
		if(url.indexOf('?') == -1) {
			url = url+'?'+params;
		} else {
			url = url+'&'+params;
		}
		return url;
	}

    $(document).ready(
	function() {
		/* sorting menu */
		$('.sortingTitle').click(
			function() {
				var this_mn = $(this).parent().find('.sortingListing');
				this_mn.show();
			}
		);
		$('html').click(
			function() {
				if($('.sortingListing').is(':visible')) {
					$('.sortingListing').hide();
				}
			}
		);
		$('.sortingListing, .sortingTitle').click(
			function(event){
				event.stopPropagation();
			}
		);

		/* top tools */
		$('.ktToolsTop .ktChk').click(
		function() {
			if(!$(this).hasClass('on')) {
				$(this).addClass('on')
				$('.search_listing_icon input.ktChk').attr('checked', 'checked');
			}
			else {
				$(this).removeClass('on')
				$('.search_listing_icon input.ktChk').removeAttr('checked');
			}
		}
	);

		//Bulk actions.
		$('.ktFrmBulkActionsWrapper form').submit(function(){
			var form = $(this);
			var actionSel = $('.ktSel', $(this)).val();

			if(actionSel == 'undefined' || actionSel == '') {
				alert('Please select an action.');
				return false;
			} else {
				//Add action.
				form.attr('action', actionSel);
			}

			//Get selected checks.
			if($('.chckCont input[type=checkbox].ktChk:checked').length == 0) {
				alert('Please check at least one checkbox.')
				return false;
			} else {
				//Add guids.
				$('.chckCont input[type=checkbox].ktChk:checked').each(function() {
					//Create hidden.
					var hdnCheck = document.createElement('input');
					$(hdnCheck).attr('type', 'hidden').attr('name', 'guids[]').val($(this).val());

					//Add to form
					$(form).append(hdnCheck);

				});
			}
		});

		/**
		 * Ajax implementations
		 */

		$('form[rel="isAjaxForm"]').live('submit', function(event) {

			var form = $(this);
			var submit_button = $('input[type=submit]', $(form));

			// Save tinymcd
			if (typeof(tinyMCE) != 'undefined') {
				tinyMCE.triggerSave();
			}

			var form_options = {
				//				dataType:  'json', //This is not usefull for now, because some plugins could return just some HTML instead json objects

				data: { callback: true }, //force the callback, because the uploads files use an iframe and the requested_with header is not sent.

				beforeSend: function(xhr) {
					xhr.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest"); // force XMLHttprequest, for older and ugly browsers, read about IE
				},
				
				beforeSubmit: function(arr, submitted_form, options) {
					$(submitted_form).trigger('ajax_before_submit', [arr, submitted_form, options]);
				},

				success: function(data, statusText, xhr, submitted_form) {

					if ($(submit_button).attr('rel')) {
						kt_polls_ktform_process_submit(form);
						$(submit_button).removeAttr('disabled');
					}

					/**
					 * Trigger the event so others plugins could extend this function and display some messages.
					 *
					 * Example:
					 *
					 * $('.ktFrm.demo form').bind('ajax_submit', function(event, data, statusText, xhr) {
					 *     console.log(data);
					 * });
					 *
					 */
					$(submitted_form).trigger('ajax_submit', [data, statusText, xhr]);
				},

				error: function (xmlRequest, textStatus, errorThrown) {
					alert(errorThrown);
				}

			};

			$(form).ajaxSubmit(form_options);

			//Prevent default submission
			event.preventDefault();

		});
		
		/**
		 * End of ajax implementations
		 */

	} //End Of Doc Ready
);/**
sprintf() for JavaScript 0.7-beta1
http://www.diveintojavascript.com/projects/javascript-sprintf

Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of sprintf() for JavaScript nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Changelog:
2010.09.06 - 0.7-beta1
  - features: vsprintf, support for named placeholders
  - enhancements: format cache, reduced global namespace pollution

2010.05.22 - 0.6:
 - reverted to 0.4 and fixed the bug regarding the sign of the number 0
 Note:
 Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)
 who warned me about a bug in 0.5, I discovered that the last update was
 a regress. I appologize for that.

2010.05.09 - 0.5:
 - bug fix: 0 is now preceeded with a + sign
 - bug fix: the sign was not at the right position on padded results (Kamal Abdali)
 - switched from GPL to BSD license

2007.10.21 - 0.4:
 - unit test and patch (David Baird)

2007.09.17 - 0.3:
 - bug fix: no longer throws exception on empty paramenters (Hans Pufal)

2007.09.11 - 0.2:
 - feature: added argument swapping

2007.04.03 - 0.1:
 - initial release
**/

var sprintf = (function() {
	function get_type(variable) {
		return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
	}
	function str_repeat(input, multiplier) {
		for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}
		return output.join('');
	}

	var str_format = function() {
		if (!str_format.cache.hasOwnProperty(arguments[0])) {
			str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
		}
		return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
	};

	str_format.format = function(parse_tree, argv) {
		var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
		for (i = 0; i < tree_length; i++) {
			node_type = get_type(parse_tree[i]);
			if (node_type === 'string') {
				output.push(parse_tree[i]);
			}
			else if (node_type === 'array') {
				match = parse_tree[i]; // convenience purposes only
				if (match[2]) { // keyword argument
					arg = argv[cursor];
					for (k = 0; k < match[2].length; k++) {
						if (!arg.hasOwnProperty(match[2][k])) {
							throw(sprintf('[sprintf] property "%s" does not exist', match[2][k]));
						}
						arg = arg[match[2][k]];
					}
				}
				else if (match[1]) { // positional argument (explicit)
					arg = argv[match[1]];
				}
				else { // positional argument (implicit)
					arg = argv[cursor++];
				}

				if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
					throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));
				}
				switch (match[8]) {
					case 'b': arg = arg.toString(2); break;
					case 'c': arg = String.fromCharCode(arg); break;
					case 'd': arg = parseInt(arg, 10); break;
					case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
					case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
					case 'o': arg = arg.toString(8); break;
					case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
					case 'u': arg = Math.abs(arg); break;
					case 'x': arg = arg.toString(16); break;
					case 'X': arg = arg.toString(16).toUpperCase(); break;
				}
				arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
				pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
				pad_length = match[6] - String(arg).length;
				pad = match[6] ? str_repeat(pad_character, pad_length) : '';
				output.push(match[5] ? arg + pad : pad + arg);
			}
		}
		return output.join('');
	};

	str_format.cache = {};

	str_format.parse = function(fmt) {
		var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
		while (_fmt) {
			if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
				parse_tree.push(match[0]);
			}
			else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
				parse_tree.push('%');
			}
			else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
				if (match[2]) {
					arg_names |= 1;
					var field_list = [], replacement_field = match[2], field_match = [];
					if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
						field_list.push(field_match[1]);
						while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
							if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
								field_list.push(field_match[1]);
							}
							else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
								field_list.push(field_match[1]);
							}
							else {
								throw('[sprintf] huh?');
							}
						}
					}
					else {
						throw('[sprintf] huh?');
					}
					match[2] = field_list;
				}
				else {
					arg_names |= 2;
				}
				if (arg_names === 3) {
					throw('[sprintf] mixing positional and named placeholders is not (yet) supported');
				}
				parse_tree.push(match);
			}
			else {
				throw('[sprintf] huh?');
			}
			_fmt = _fmt.substring(match[0].length);
		}
		return parse_tree;
	};

	return str_format;
})();

var vsprintf = function(fmt, argv) {
	argv.unshift(fmt);
	return sprintf.apply(null, argv);
};
/**
 * @namespace Singleton object for holding the Elgg javascript library
 */
var elgg = elgg || {};

/**
 * Pointer to the global context
 *
 * @see elgg.require
 * @see elgg.provide
 */
elgg.global = this;

/**
 * Convenience reference to an empty function.
 *
 * Save memory by not generating multiple empty functions.
 */
elgg.nullFunction = function() {};

/**
 * This forces an inheriting class to implement the method or
 * it will throw an error.
 *
 * @example
 * AbstractClass.prototype.toBeImplemented = elgg.abstractMethod;
 */
elgg.abstractMethod = function() {
	throw new Error("Oops... you forgot to implement an abstract method!");
};

/**
 * Merges two or more objects together and returns the result.
 */
elgg.extend = jQuery.extend;

/**
 * Check if the value is an array.
 *
 * No sense in reinventing the wheel!
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isArray = jQuery.isArray;

/**
 * Check if the value is a function.
 *
 * No sense in reinventing the wheel!
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isFunction = jQuery.isFunction;

/**
 * Check if the value is a "plain" object (i.e., created by {} or new Object())
 *
 * No sense in reinventing the wheel!
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isPlainObject = jQuery.isPlainObject;

/**
 * Check if the value is a string
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isString = function(val) {
	return typeof val === 'string';
};

/**
 * Check if the value is a number
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isNumber = function(val) {
	return typeof val === 'number';
};

/**
 * Check if the value is an object
 *
 * @note This returns true for functions and arrays!  If you want to return true only
 * for "plain" objects (created using {} or new Object()) use elgg.isPlainObject.
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isObject = function(val) {
	return typeof val === 'object';
};

/**
 * Check if the value is undefined
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isUndefined = function(val) {
	return val === undefined;
};

/**
 * Check if the value is null
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isNull = function(val) {
	return val === null;
};

/**
 * Check if the value is either null or undefined
 *
 * @param {*} val
 *
 * @return boolean
 */
elgg.isNullOrUndefined = function(val) {
	return val == null;
};

/**
 * Throw an exception of the type doesn't match
 *
 * @todo Might be more appropriate for debug mode only?
 */
elgg.assertTypeOf = function(type, val) {
	if (typeof val !== type) {
		throw new TypeError("Expecting param of " +
							arguments.caller + "to be a(n) " + type + "." +
							"  Was actually a(n) " + typeof val + ".");
	}
};

/**
 * Throw an error if the required package isn't present
 *
 * @param {String} pkg The required package (e.g., 'elgg.package')
 */
elgg.require = function(pkg) {
	elgg.assertTypeOf('string', pkg);

	var parts = pkg.split('.'),
		cur = elgg.global,
		part, i;

	for (i = 0; i < parts.length; i += 1) {
		part = parts[i];
		cur = cur[part];
		if (elgg.isUndefined(cur)) {
			throw new Error("Missing package: " + pkg);
		}
	}
};

/**
 * Generate the skeleton for a package.
 *
 * <pre>
 * elgg.provide('elgg.package.subpackage');
 * </pre>
 *
 * is equivalent to
 *
 * <pre>
 * elgg = elgg || {};
 * elgg.package = elgg.package || {};
 * elgg.package.subpackage = elgg.package.subpackage || {};
 * </pre>
 *
 * @example elgg.provide('elgg.config.translations')
 *
 * @param {string} pkg The package name.
 */
elgg.provide = function(pkg, opt_context) {
	elgg.assertTypeOf('string', pkg);

	var parts = pkg.split('.'),
		context = opt_context || elgg.global,
		part, i;


	for (i = 0; i < parts.length; i += 1) {
		part = parts[i];
		context[part] = context[part] || {};
		context = context[part];
	}
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * @example
 * <pre>
 * function ParentClass(a, b) { }
 *
 * ParentClass.prototype.foo = function(a) { alert(a); }
 *
 * function ChildClass(a, b, c) {
 *     //equivalent of parent::__construct(a, b); in PHP
 *     ParentClass.call(this, a, b);
 * }
 *
 * elgg.inherit(ChildClass, ParentClass);
 *
 * var child = new ChildClass('a', 'b', 'see');
 * child.foo('boo!'); // alert('boo!');
 * </pre>
 *
 * @param {Function} Child Child class constructor.
 * @param {Function} Parent Parent class constructor.
 */
elgg.inherit = function(Child, Parent) {
	Child.prototype = new Parent();
	Child.prototype.constructor = Child;
};

/**
 * Converts shorthand urls to absolute urls.
 *
 * If the url is already absolute or protocol-relative, no change is made.
 *
 * elgg.normalize_url('');                   // 'http://my.site.com/'
 * elgg.normalize_url('dashboard');          // 'http://my.site.com/dashboard'
 * elgg.normalize_url('http://google.com/'); // no change
 * elgg.normalize_url('//google.com/');      // no change
 *
 * @param {String} url The url to normalize
 * @return {String} The extended url
 * @private
 */
elgg.normalize_url = function(url) {
	url = url || '';
	elgg.assertTypeOf('string', url);

	validated = (function(url) {
		url = elgg.parse_url(url);
		if (url.scheme){
			url.scheme = url.scheme.toLowerCase();
		}
		if (url.scheme == 'http' || url.scheme == 'https') {
			if (!url.host) {
				return false;
			}
			/* hostname labels may contain only alphanumeric characters, dots and hypens. */
			if (!(new RegExp("^([a-zA-Z0-9][a-zA-Z0-9\\-\\.]*)$", "i")).test(url.host) || url.host.charAt(-1) == '.') {
				return false;
			}
		}
		/* some schemas allow the host to be empty */
		if (!url.scheme || !url.host && url.scheme != 'mailto' && url.scheme != 'news' && url.scheme != 'file') {
			return false;
		}
		return true;
	})(url);

	// all normal URLs including mailto:
	if (validated) {		
		return url;
	}

	// '//example.com' (Shortcut for protocol.)
	// '?query=test', #target
	else if ((new RegExp("^(\\#|\\?|//)", "i")).test(url)) {
		return url;
	}

	// 'javascript:'
	else if (url.indexOf('javascript:') === 0 || url.indexOf('mailto:') === 0 ) {
		return url;
	}

	// watch those double escapes in JS.

	// 'install.php', 'install.php?step=step'
	else if ((new RegExp("^[^\/]*\\.php(\\?.*)?$", "i")).test(url)) {
		return elgg.config.wwwroot + url.ltrim('/');
	}

	// 'example.com', 'example.com/subpage'
	else if ((new RegExp("^[^/]*\\.", "i")).test(url)) {
		return 'http://' + url;
	}

	// 'page/handler', 'mod/plugin/file.php'
	else {
		// trim off any leading / because the site URL is stored
		// with a trailing /
		return elgg.config.wwwroot + url.ltrim('/');
	}
};

/**
 * Displays system messages via javascript rather than php.
 *
 * @param {String} msgs The message we want to display
 * @param {Number} delay The amount of time to display the message in milliseconds. Defaults to 6 seconds.
 * @param {String} type The type of message (typically 'error' or 'message')
 * @private
 */
elgg.system_messages = function(msgs, delay, type) {
	if (elgg.isUndefined(msgs)) {
		return;
	}

	var classes = ['elgg-message'],
		messages_html = [],
		appendMessage = function(msg) {
			messages_html.push('<li class="' + classes.join(' ') + '"><p>' + msg + '</p></li>');
		},
		systemMessages = $('ul.elgg-system-messages'),
		i;

	//validate delay.  Must be a positive integer.
	delay = parseInt(delay || 6000, 10);
	if (isNaN(delay) || delay <= 0) {
		delay = 6000;
	}

	//Handle non-arrays
	if (!elgg.isArray(msgs)) {
		msgs = [msgs];
	}

	if (type === 'error') {
		classes.push('elgg-state-error');
	} else {
		classes.push('elgg-state-success');
	}

	msgs.forEach(appendMessage);

	if (type != 'error') {
		$(messages_html.join('')).appendTo(systemMessages)
			.animate({opacity: '1.0'}, delay).fadeOut('slow');
	} else {
		$(messages_html.join('')).appendTo(systemMessages);
	}
};

/**
 * Wrapper function for system_messages. Specifies "messages" as the type of message
 * @param {String} msgs  The message to display
 * @param {Number} delay How long to display the message (milliseconds)
 */
elgg.system_message = function(msgs, delay) {
	elgg.system_messages(msgs, delay, "message");
};

/**
 * Wrapper function for system_messages.  Specifies "errors" as the type of message
 * @param {String} errors The error message to display
 * @param {Number} delay  How long to dispaly the error message (milliseconds)
 */
elgg.register_error = function(errors, delay) {
	elgg.system_messages(errors, delay, "error");
};

/**
 * Meant to mimic the php forward() function by simply redirecting the
 * user to another page.
 *
 * @param {String} url The url to forward to
 */
elgg.forward = function(url) {
	location.href = elgg.normalize_url(url);
};

/**
 * Parse a URL into its parts. Mimicks http://php.net/parse_url
 *
 * @param {String} url       The URL to parse
 * @param {Int}    component A component to return
 * @param {Bool}   expand    Expand the query into an object? Else it's a string.
 *
 * @return {Object} The parsed URL
 */
elgg.parse_url = function(url, component, expand) {
	// Adapted from http://blog.stevenlevithan.com/archives/parseuri
	// which was release under the MIT
	// It was modified to fix mailto: and javascript: support.
	var
	expand = expand || false,
	component = component || false,
	
	re_str =
		// scheme (and user@ testing)
		'^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?://)?'
		// possibly a user[:password]@
		+ '((?:(([^:@]*)(?::([^:@]*))?)?@)?'
		// host and port
		+ '([^:/?#]*)(?::(\\d*))?)'
		// path
		+ '(((/(?:[^?#](?![^?#/]*\\.[^?#/.]+(?:[?#]|$)))*/?)?([^?#/]*))'
		// query string
		+ '(?:\\?([^#]*))?'
		// fragment
		+ '(?:#(.*))?)',
	keys = {
			1: "scheme",
			4: "user",
			5: "pass",
			6: "host",
			7: "port",
			9: "path",
			12: "query",
			13: "fragment"
	},
	results = {};

	if (url.indexOf('mailto:') === 0) {
		results['scheme'] = 'mailto';
		results['path'] = url.replace('mailto:', '');
		return results;
	}

	if (url.indexOf('javascript:') === 0) {
		results['scheme'] = 'javascript';
		results['path'] = url.replace('javascript:', '');
		return results;
	}

	var re = new RegExp(re_str);
	var matches = re.exec(url);

	for (var i in keys) {
		if (matches[i]) {
			results[keys[i]] = matches[i];
		}
	}

	if (expand && typeof(results['query']) != 'undefined') {
		results['query'] = elgg.parse_str(results['query']);
	}

	if (component) {
		if (typeof(results[component]) != 'undefined') {
			return results[component];
		} else {
			return false;
		}
	}
	return results;
};

/**
 * Returns an object with key/values of the parsed query string.
 *
 * @param  {String} string The string to parse
 * @return {Object} The parsed object string
 */
elgg.parse_str = function(string) {
	var params = {};
	var result,
		key,
		value,
		re = /([^&=]+)=?([^&]*)/g;

	while (result = re.exec(string)) {
		key = decodeURIComponent(result[1])
		value = decodeURIComponent(result[2])
		params[key] = value;
	}
	
	return params;
};

/**
 * Returns a jQuery selector from a URL's fragement.  Defaults to expecting an ID.
 *
 * Examples:
 *  http://elgg.org/download.php returns ''
 *	http://elgg.org/download.php#id returns #id
 *	http://elgg.org/download.php#.class-name return .class-name
 *	http://elgg.org/download.php#a.class-name return a.class-name
 *
 * @param {String} url The URL
 * @return {String} The selector
 */
elgg.getSelectorFromUrlFragment = function(url) {
	var fragment = url.split('#')[1];

	if (fragment) {
		// this is a .class or a tag.class
		if (fragment.indexOf('.') > -1) {
			return fragment;
		}

		// this is an id
		else {
			return '#' + fragment;
		}
	}
	return '';
};

/**
 * Adds child to object[parent] array.
 *
 * @param {Object} object The object to add to
 * @param {String} parent The parent array to add to.
 * @param {Mixed}  value  The value
 */
elgg.push_to_object_array = function(object, parent, value) {
	elgg.assertTypeOf('object', object);
	elgg.assertTypeOf('string', parent);

	if (!(object[parent] instanceof Array)) {
		object[parent] = []
	}

	if ($.inArray(value, object[parent]) < 0) {
		return object[parent].push(value);
	}

	return false;
};

/**
 * Tests if object[parent] contains child
 *
 * @param {Object} object The object to add to
 * @param {String} parent The parent array to add to.
 * @param {Mixed}  value  The value
 */
elgg.is_in_object_array = function(object, parent, value) {
	elgg.assertTypeOf('object', object);
	elgg.assertTypeOf('string', parent);

	return typeof(object[parent]) != 'undefined' && $.inArray(value, object[parent]) >= 0;
};

/**
 * Triggers the init hook when the library is ready
 *
 * Current requirements:
 * - DOM is ready
 * - languages loaded
 *
 */
elgg.initWhenReady = function() {
	if (elgg.config.languageReady && elgg.config.domReady) {
		elgg.trigger_hook('init', 'system');
		elgg.trigger_hook('ready', 'system');
	}
};
/**
 * Create a new ElggEntity
 * 
 * @class Represents an ElggEntity
 * @property {number} guid
 * @property {string} type
 * @property {string} subtype
 * @property {number} owner_guid
 * @property {number} site_guid
 * @property {number} container_guid
 * @property {number} access_id
 * @property {number} time_created
 * @property {number} time_updated
 * @property {number} last_action
 * @property {string} enabled
 * 
 */
elgg.ElggEntity = function(o) {
	$.extend(this, o);
};/**
 * Create a new ElggUser
 *
 * @param {Object} o
 * @extends ElggEntity
 * @class Represents an ElggUser
 * @property {string} name
 * @property {string} username
 * @property {string} language
 * @property {boolean} admin
 */
elgg.ElggUser = function(o) {
	elgg.ElggEntity.call(this, o);
};

elgg.inherit(elgg.ElggUser, elgg.ElggEntity);

/**
 * Is this user an admin?
 *
 * @warning The admin state of the user should be checked on the server for any
 * actions taken that require admin privileges.
 *
 * @return {boolean}
 */
elgg.ElggUser.prototype.isAdmin = function() {
	return this.admin;
};/**
 * Priority lists allow you to create an indexed list that can be iterated through in a specific
 * order.
 */
elgg.ElggPriorityList = function() {
	this.length = 0;
	this.priorities_ = [];
};

/**
 * Inserts an element into the priority list at the priority specified.
 *
 * @param {Object} obj          The object to insert
 * @param {Number} opt_priority An optional priority to insert at.
 * 
 * @return {Void}
 */
elgg.ElggPriorityList.prototype.insert = function(obj, opt_priority) {
	var priority = 500;
	if (arguments.length == 2 && opt_priority != undefined) {
		priority = parseInt(opt_priority, 10);
	}

	priority = Math.max(priority, 0);

	if (elgg.isUndefined(this.priorities_[priority])) {
		this.priorities_[priority] = [];
	}

	this.priorities_[priority].push(obj);
	this.length++;
};

/**
 * Iterates through each element in order.
 *
 * Unlike every, this ignores the return value of the callback.
 *
 * @param {Function} callback The callback function to pass each element through. See
 *                            Array.prototype.every() for details.
 * @return {Object}
 */
elgg.ElggPriorityList.prototype.forEach = function(callback) {
	elgg.assertTypeOf('function', callback);

	var index = 0;

	this.priorities_.forEach(function(elems) {
		elems.forEach(function(elem) {
			callback(elem, index++);
		});
	});

	return this;
};

/**
 * Iterates through each element in order.
 *
 * Unlike forEach, this returns the value of the callback and will break on false.
 *
 * @param {Function} callback The callback function to pass each element through. See
 *                            Array.prototype.every() for details.
 * @return {Object}
 */
elgg.ElggPriorityList.prototype.every = function(callback) {
	elgg.assertTypeOf('function', callback);

	var index = 0;

	return this.priorities_.every(function(elems) {
		return elems.every(function(elem) {
			return callback(elem, index++);
		});
	});
};

/**
 * Removes an element from the priority list
 *
 * @param {Object} obj The object to remove.
 * @return {Void}
 */
elgg.ElggPriorityList.prototype.remove = function(obj) {
	this.priorities_.forEach(function(elems) {
		var index;
		while ((index = elems.indexOf(obj)) !== -1) {
			elems.splice(index, 1);
			this.length--;
		}
	});
};/**
 * Interates through each element of an array and calls a callback function.
 * The callback should accept the following arguments:
 *	element - The current element
 *	index	- The current index
 *
 * This is different to Array.forEach in that if the callback returns false, the loop returns
 * immediately without processing the remaining elements.
 *
 *	@param {Function} callback
 *	@return {Bool}
 */
if (!Array.prototype.every) {
	Array.prototype.every = function(callback) {
		var len = this.length, i;

		for (i = 0; i < len; i++) {
			if (i in this && !callback.call(null, this[i], i)) {
				return false;
			}
		}

		return true;
	};
}

/**
 * Interates through each element of an array and calls callback a function.
 * The callback should accept the following arguments:
 *	element - The current element
 *	index	- The current index
 *
 * This is different to Array.every in that the callback's return value is ignored and every
 * element of the array will be parsed.
 *
 *	@param {Function} callback
 *	@return {Void}
 */
if (!Array.prototype.forEach) {
	Array.prototype.forEach = function(callback) {
		var len = this.length, i;

		for (i = 0; i < len; i++) {
			if (i in this) {
				callback.call(null, this[i], i);
			}
		}
	};
}

/**
 * Left trim
 *
 * Removes a character from the left side of a string.
 * @param {String} str The character to remove
 * @return {String}
 */
if (!String.prototype.ltrim) {
	String.prototype.ltrim = function(str) {
		if (this.indexOf(str) === 0) {
			return this.substring(str.length);
		} else {
			return this;
		}
	};
}
/*
 * Javascript hook interface
 */

elgg.provide('elgg.config.hooks');
elgg.provide('elgg.config.instant_hooks');
elgg.provide('elgg.config.triggered_hooks');

/**
 * Registers a hook handler with the event system.
 *
 * The special keyword "all" can be used for either the name or the type or both
 * and means to call that handler for all of those hooks.
 *
 * Note that handlers registering for instant hooks will be executed immediately if the instant
 * hook has been previously triggered.
 *
 * @param {String}   name     Name of the plugin hook to register for
 * @param {String}   type     Type of the event to register for
 * @param {Function} handler  Handle to call
 * @param {Number}   priority Priority to call the event handler
 * @return {Bool}
 */
elgg.register_hook_handler = function(name, type, handler, priority) {
	elgg.assertTypeOf('string', name);
	elgg.assertTypeOf('string', type);
	elgg.assertTypeOf('function', handler);

	if (!name || !type) {
		return false;
	}

	var priorities =  elgg.config.hooks;

	elgg.provide(name + '.' + type, priorities);

	if (!(priorities[name][type] instanceof elgg.ElggPriorityList)) {
		priorities[name][type] = new elgg.ElggPriorityList();
	}

	// call if instant and already triggered.
	if (elgg.is_instant_hook(name, type) && elgg.is_triggered_hook(name, type)) {
		handler(name, type, null, null);
	}

	return priorities[name][type].insert(handler, priority);
};

/**
 * Emits a hook.
 *
 * Loops through all registered hooks and calls the handler functions in order.
 * Every handler function will always be called, regardless of the return value.
 *
 * @warning Handlers take the same 4 arguments in the same order as when calling this function.
 * This is different from the PHP version!
 *
 * @note Instant hooks do not support params or values.
 *
 * Hooks are called in this order:
 *	specifically registered (event_name and event_type match)
 *	all names, specific type
 *	specific name, all types
 *	all names, all types
 *
 * @param {String} name   Name of the hook to emit
 * @param {String} type   Type of the hook to emit
 * @param {Object} params Optional parameters to pass to the handlers
 * @param {Object} value  Initial value of the return. Can be mangled by handlers
 *
 * @return {Bool}
 */
elgg.trigger_hook = function(name, type, params, value) {
	elgg.assertTypeOf('string', name);
	elgg.assertTypeOf('string', type);

	// mark as triggered
	elgg.set_triggered_hook(name, type);

	// default to true if unpassed
	value = value || true;

	var hooks = elgg.config.hooks,
		tempReturnValue = null,
		returnValue = value,
		callHookHandler = function(handler) {
			tempReturnValue = handler(name, type, params, value);
		};

	elgg.provide(name + '.' + type, hooks);
	elgg.provide('all.' + type, hooks);
	elgg.provide(name + '.all', hooks);
	elgg.provide('all.all', hooks);

	var hooksList = [];
	
	if (name != 'all' && type != 'all') {
		hooksList.push(hooks[name][type]);
	}

	if (type != 'all') {
		hooksList.push(hooks['all'][type]);
	}

	if (name != 'all') {
		hooksList.push(hooks[name]['all']);
	}

	hooksList.push(hooks['all']['all']);

	hooksList.every(function(handlers) {
		if (handlers instanceof elgg.ElggPriorityList) {
			handlers.forEach(callHookHandler);
		}
		return true;
	});

	return (tempReturnValue != null) ? tempReturnValue : returnValue;
};

/**
 * Registers a hook as an instant hook.
 *
 * After being trigger once, registration of a handler to an instant hook will cause the
 * handle to be executed immediately.
 *
 * @note Instant hooks must be triggered without params or defaults. Any params or default
 * passed will *not* be passed to handlers executed upon registration.
 *
 * @param {String} name The hook name.
 * @param {String} type The hook type.
 * @return {Int}
 */
elgg.register_instant_hook = function(name, type) {
	elgg.assertTypeOf('string', name);
	elgg.assertTypeOf('string', type);

	return elgg.push_to_object_array(elgg.config.instant_hooks, name, type);
};

/**
 * Is this hook registered as an instant hook?
 *
 * @param {String} name The hook name.
 * @param {String} type The hook type.
 */
elgg.is_instant_hook = function(name, type) {
	return elgg.is_in_object_array(elgg.config.instant_hooks, name, type);
};

/**
 * Records that a hook has been triggered.
 *
 * @param {String} name The hook name.
 * @param {String} type The hook type.
 */
elgg.set_triggered_hook = function(name, type) {
	return elgg.push_to_object_array(elgg.config.triggered_hooks, name, type);
};

/**
 * Has this hook been triggered yet?
 *
 * @param {String} name The hook name.
 * @param {String} type The hook type.
 */
elgg.is_triggered_hook = function(name, type) {
	return elgg.is_in_object_array(elgg.config.triggered_hooks, name, type);
};

elgg.register_instant_hook('init', 'system');
elgg.register_instant_hook('ready', 'system');
elgg.register_instant_hook('boot', 'system');

/**
 * Hold security-related data here
 */
elgg.provide('elgg.security');

elgg.security.token = {};

elgg.security.tokenRefreshFailed = false;

/**
 * Sets the currently active security token and updates all forms and links on the current page.
 *
 * @param {Object} json The json representation of a token containing __elgg_ts and __elgg_token
 * @return {Void}
 */
elgg.security.setToken = function(json) {	
	//update the convenience object
	elgg.security.token = json;

	//also update all forms
	$('[name=__elgg_ts]').val(json.__elgg_ts);
	$('[name=__elgg_token]').val(json.__elgg_token);

	// also update all links that contain tokens and time stamps
	$('[href*="__elgg_ts"][href*="__elgg_token"]').each(function() {
		this.href = this.href
			.replace(/__elgg_ts=\d*/, '__elgg_ts=' + json.__elgg_ts)
			.replace(/__elgg_token=[0-9a-f]*/, '__elgg_token=' + json.__elgg_token);
	});
};

/**
 * Security tokens time out, so lets refresh those every so often.
 * 
 * @todo handle error and bad return data
 */
elgg.security.refreshToken = function() {
	elgg.action('security/refreshtoken', function(data) {

		// @todo might want to move this to setToken() once http://trac.elgg.org/ticket/3127
		// is implemented. It's here right now to avoid soggy code.
		if (!data || !(data.output.__elgg_ts && data.output.__elgg_token)) {
			elgg.register_error(elgg.echo('js:security:token_refresh_failed', [elgg.get_site_url()]));
			elgg.security.tokenRefreshFailed = true;

			// don't setToken because we refresh every 5 minutes and tokens are good for 1
			// hour by default
			return;
		}

		// if had problems last time, let them know it's working now
		if (elgg.security.tokenRefreshFailed) {
			elgg.system_message(elgg.echo('js:security:token_refreshed', [elgg.get_site_url()]));
			elgg.security.tokenRefreshFailed = false;
		}
		
		elgg.security.setToken(data.output);
	});
};


/**
 * Add elgg action tokens to an object, URL, or query string (with a ?).
 *
 * @param {Object|string} data
 * @return {Object} The new data object including action tokens
 * @private
 */
elgg.security.addToken = function(data) {

	// 'http://example.com?data=sofar'
	if (elgg.isString(data)) {
		// is this a full URL, relative URL, or just the query string?
		var parts = elgg.parse_url(data),
			args = {},
			base = '';
		
		if (parts['host'] == undefined) {
			if (data.indexOf('?') === 0) {
				// query string
				base = '?';
				args = elgg.parse_str(parts['query']);
			}
		} else {
			// full or relative URL

			if (parts['query'] != undefined) {
				// with query string
				args = elgg.parse_str(parts['query']);
			}
			var split = data.split('?');
			base = split[0] + '?';
		}
		args["__elgg_ts"] = elgg.security.token.__elgg_ts;
		args["__elgg_token"] = elgg.security.token.__elgg_token;

		return base + jQuery.param(args);
	}

	// no input!  acts like a getter
	if (elgg.isUndefined(data)) {
		return elgg.security.token;
	}

	// {...}
	if (elgg.isPlainObject(data)) {
		return elgg.extend(data, elgg.security.token);
	}

	// oops, don't recognize that!
	throw new TypeError("elgg.security.addToken not implemented for " + (typeof data) + "s");
};

elgg.security.init = function() {
	//refresh security token every 5 minutes
	//this is set in the js/elgg PHP view.
	setInterval(elgg.security.refreshToken, elgg.security.interval);
};

elgg.register_hook_handler('boot', 'system', elgg.security.init);
/*globals vsprintf*/
/**
 * Provides language-related functionality
 */
elgg.provide('elgg.config.translations');

// default language - required by unit tests
elgg.config.language = 'en';

/**
 * Analagous to the php version.  Merges translations for a
 * given language into the current translations map.
 */
elgg.add_translation = function(lang, translations) {
	elgg.provide('elgg.config.translations.' + lang);

	elgg.extend(elgg.config.translations[lang], translations);
};

/**
 * Load the translations for the given language.
 *
 * If no language is specified, the default language is used.
 * @param {string} language
 * @return {XMLHttpRequest}
 */
elgg.reload_all_translations = function(language) {
	var lang = language || elgg.get_language();

	var url, options;
	if (elgg.config.simplecache_enabled) {
		url = 'cache/js/default/languages/' + lang + '.' + elgg.config.lastcache + '.js';
		options = {};
	} else {
		url = 'ajax/view/js/languages';
		options = {data: {language: lang}};
	}

	options['success'] = function(json) {
		elgg.add_translation(lang, json);
		elgg.config.languageReady = true;
		elgg.initWhenReady();
	};

	elgg.getJSON(url, options);
};

/**
 * Get the current language
 * @return {String}
 */
elgg.get_language = function() {
	var user = elgg.get_logged_in_user_entity();

	if (user && user.language) {
		return user.language;
	}

	return elgg.config.language;
};

/**
 * Translates a string
 *
 * @param {String} key      The string to translate
 * @param {Array}  argv     vsprintf support
 * @param {String} language The language to display it in
 *
 * @return {String} The translation
 */
elgg.echo = function(key, argv, language) {
	//elgg.echo('str', 'en')
	if (elgg.isString(argv)) {
		language = argv;
		argv = [];
	}

	//elgg.echo('str', [...], 'en')
	var translations = elgg.config.translations,
		dlang = elgg.get_language(),
		map;

	language = language || dlang;
	argv = argv || [];

	map = translations[language] || translations[dlang];
	if (map && map[key]) {
		return vsprintf(map[key], argv);
	}

	return key;
};

elgg.config.translations.init = function() {
	elgg.reload_all_translations();
};

elgg.register_hook_handler('boot', 'system', elgg.config.translations.init);
/*globals elgg, $*/
elgg.provide('elgg.ajax');

/**
 * @author Evan Winslow
 * Provides a bunch of useful shortcut functions for making ajax calls
 */

/**
 * Wrapper function for jQuery.ajax which ensures that the url being called
 * is relative to the elgg site root.
 *
 * You would most likely use elgg.get or elgg.post, rather than this function
 *
 * @param {string} url Optionally specify the url as the first argument
 * @param {Object} options Optional. {@see jQuery#ajax}
 * @return {XmlHttpRequest}
 */
elgg.ajax = function(url, options) {
	options = elgg.ajax.handleOptions(url, options);

	options.url = elgg.normalize_url(options.url);
	return $.ajax(options);
};
/**
 * @const
 */
elgg.ajax.SUCCESS = 0;

/**
 * @const
 */
elgg.ajax.ERROR = -1;

/**
 * Handle optional arguments and return the resulting options object
 *
 * @param url
 * @param options
 * @return {Object}
 * @private
 */
elgg.ajax.handleOptions = function(url, options) {
	var data_only = true,
		data,
		member;

	//elgg.ajax('example/file.php', {...});
	if (elgg.isString(url)) {
		options = options || {};

	//elgg.ajax({...});
	} else {
		options = url || {};
		url = options.url;
	}

	//elgg.ajax('example/file.php', function() {...});
	if (elgg.isFunction(options)) {
		data_only = false;
		options = {success: options};
	}

	//elgg.ajax('example/file.php', {data:{...}});
	if (options.data) {
		data_only = false;
	} else {
		for (member in options) {
			//elgg.ajax('example/file.php', {callback:function(){...}});
			if (elgg.isFunction(options[member])) {
				data_only = false;
			}
		}
	}

	//elgg.ajax('example/file.php', {notdata:notfunc});
	if (data_only) {
		data = options;
		options = {data: data};
	}

	if (url) {
		options.url = url;
	}

	return options;
};

/**
 * Wrapper function for elgg.ajax which forces the request type to 'get.'
 *
 * @param {string} url Optionally specify the url as the first argument
 * @param {Object} options {@see jQuery#ajax}
 * @return {XmlHttpRequest}
 */
elgg.get = function(url, options) {
	options = elgg.ajax.handleOptions(url, options);

	options.type = 'get';
	return elgg.ajax(options);
};

/**
 * Wrapper function for elgg.get which forces the dataType to 'json.'
 *
 * @param {string} url Optionally specify the url as the first argument
 * @param {Object} options {@see jQuery#ajax}
 * @return {XmlHttpRequest}
 */
elgg.getJSON = function(url, options) {
	options = elgg.ajax.handleOptions(url, options);

	options.dataType = 'json';
	return elgg.get(options);
};

/**
 * Wrapper function for elgg.ajax which forces the request type to 'post.'
 *
 * @param {string} url Optionally specify the url as the first argument
 * @param {Object} options {@see jQuery#ajax}
 * @return {XmlHttpRequest}
 */
elgg.post = function(url, options) {
	options = elgg.ajax.handleOptions(url, options);

	options.type = 'post';
	return elgg.ajax(options);
};

/**
 * Perform an action via ajax
 *
 * @example Usage 1:
 * At its simplest, only the action name is required (and anything more than the
 * action name will be invalid).
 * <pre>
 * elgg.action('name/of/action');
 * </pre>
 *
 * The action can be relative to the current site ('name/of/action') or
 * the full URL of the action ('http://elgg.org/action/name/of/action').
 *
 * @example Usage 2:
 * If you want to pass some data along with it, use the second parameter
 * <pre>
 * elgg.action('friend/add', { friend: some_guid });
 * </pre>
 *
 * @example Usage 3:
 * Of course, you will have no control over what happens when the request
 * completes if you do it like that, so there's also the most verbose method
 * <pre>
 * elgg.action('friend/add', {
 *     data: {
 *         friend: some_guid
 *     },
 *     success: function(json) {
 *         //do something
 *     },
 * }
 * </pre>
 * You can pass any of your favorite $.ajax arguments into this second parameter.
 *
 * @note If you intend to use the second field in the "verbose" way, you must
 * specify a callback method or the data parameter.  If you do not, elgg.action
 * will think you mean to send the second parameter as data.
 *
 * @note You do not have to add security tokens to this request.  Elgg does that
 * for you automatically.
 *
 * @see jQuery.ajax
 *
 * @param {String} action The action to call.
 * @param {Object} options
 * @return {XMLHttpRequest}
 */
elgg.action = function(action, options) {
	elgg.assertTypeOf('string', action);

	// support shortcut and full URLs
	// this will mangle URLs that aren't elgg actions.
	// Use post, get, or ajax for those.
	if (action.indexOf('action/') < 0) {
		action = 'action/' + action;
	}

	options = elgg.ajax.handleOptions(action, options);

	// This is a misuse of elgg.security.addToken() because it is not always a
	// full query string with a ?. As such we need a special check for the tokens.
	if (!elgg.isString(options.data) || options.data.indexOf('__elgg_ts') == -1) {
		options.data = elgg.security.addToken(options.data);
	}
	options.dataType = 'json';

	//Always display system messages after actions
	var custom_success = options.success || elgg.nullFunction;
	options.success = function(json, two, three, four) {
		if (json && json.system_messages) {
			elgg.register_error(json.system_messages.error);
			elgg.system_message(json.system_messages.success);
		}

		custom_success(json, two, three, four);
	};

	return elgg.post(options);
};

/**
 * Make an API call
 *
 * @example Usage:
 * <pre>
 * elgg.api('system.api.list', {
 *     success: function(data) {
 *         console.log(data);
 *     }
 * });
 * </pre>
 *
 * @param {String} method The API method to be called
 * @param {Object} options {@see jQuery#ajax}
 * @return {XmlHttpRequest}
 */
elgg.api = function (method, options) {
	elgg.assertTypeOf('string', method);

	var defaults = {
		dataType: 'json',
		data: {}
	};

	options = elgg.ajax.handleOptions(method, options);
	options = $.extend(defaults, options);

	options.url = 'services/api/rest/' + options.dataType + '/';
	options.data.method = method;

	return elgg.ajax(options);
};

/**
 * Provides session methods.
 */
elgg.provide('elgg.session');

/**
 * Helper function for setting cookies
 * @param {string} name
 * @param {string} value
 * @param {Object} options
 * 
 *  {number|Date} options[expires]
 * 	{string} options[path]
 * 	{string} options[domain]
 * 	{boolean} options[secure]
 * 
 * @return {string} The value of the cookie, if only name is specified
 */
elgg.session.cookie = function (name, value, options) {
	var cookies = [], cookie = [], i = 0, date, valid = true;
	
	//elgg.session.cookie()
	if (elgg.isUndefined(name)) {
		return document.cookie;
	}
	
	//elgg.session.cookie(name)
	if (elgg.isUndefined(value)) {
		if (document.cookie && document.cookie !== '') {
			cookies = document.cookie.split(';');
			for (i = 0; i < cookies.length; i += 1) {
				cookie = jQuery.trim(cookies[i]).split('=');
				if (cookie[0] === name) {
					return decodeURIComponent(cookie[1]);
				}
			}
		}
		return undefined;
	}
	
	// elgg.session.cookie(name, value[, opts])
	options = options || {};
	
	if (elgg.isNull(value)) {
		value = '';
		options.expires = -1;
	}
	
	cookies.push(name + '=' + value);
	
	if (elgg.isNumber(options.expires)) {
		if (elgg.isNumber(options.expires)) {
			date = new Date();
			date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
		} else if (options.expires.toUTCString) {
			date = options.expires;
		} else {
			valid = false;
		}
		
		if (valid) {
			cookies.push('expires=' + date.toUTCString());
		}
	}
	
	// CAUTION: Needed to parenthesize options.path and options.domain
	// in the following expressions, otherwise they evaluate to undefined
	// in the packed version for some reason.
	if (options.path) {
		cookies.push('path=' + (options.path));
	}

	if (options.domain) {
		cookies.push('domain=' + (options.domain));
	}
	
	if (options.secure) {
		cookies.push('secure');
	}
	
	document.cookie = cookies.join('; ');
};

/**
 * Returns the object of the user logged in.
 *
 * @return {ElggUser} The logged in user
 */
elgg.get_logged_in_user_entity = function() {
	return elgg.session.user;
};

/**
 * Returns the GUID of the logged in user or 0.
 *
 * @return {number} The GUID of the logged in user
 */
elgg.get_logged_in_user_guid = function() {
	var user = elgg.get_logged_in_user_entity();
	return user ? user.guid : 0;
};

/**
 * Returns if a user is logged in.
 *
 * @return {boolean} Whether there is a user logged in
 */
elgg.is_logged_in = function() {
	return (elgg.get_logged_in_user_entity() instanceof elgg.ElggUser);
};

/**
 * Returns if the currently logged in user is an admin.
 *
 * @return {boolean} Whether there is an admin logged in
 */
elgg.is_admin_logged_in = function() {
	var user = elgg.get_logged_in_user_entity();
	return (user instanceof elgg.ElggUser) && user.isAdmin();
};

/**
 * @deprecated Use elgg.session.cookie instead
 */
jQuery.cookie = elgg.session.cookie;
/**
 * Provides page owner and context functions
 *
 * @todo This is a stub. Page owners can't be fully implemented until
 * the 4 types are finished.
 */

/**
 * @return {number} The GUID of the page owner entity or 0 for no owner
 */
elgg.get_page_owner_guid = function() {
	if (elgg.page_owner !== undefined) {
		return elgg.page_owner.guid;
	} else {
		return 0;
	}
};


elgg.provide('elgg.config');

/**
 * Returns the current site URL
 *
 * @return {String} The site URL.
 */
elgg.get_site_url = function() {
	return elgg.config.wwwroot;
};
elgg.provide('elgg.ui');

elgg.ui.init = function () {
	// add user hover menus
	elgg.ui.initHoverMenu();

	//if the user clicks a system message, make it disappear
	$('.elgg-system-messages li').live('click', function() {
		$(this).stop().fadeOut('fast');
	});

	$('.elgg-system-messages li').animate({opacity: 0.9}, 6000);
	$('.elgg-system-messages li.elgg-state-success').fadeOut('slow');

	$('[rel=toggle]').live('click', elgg.ui.toggles);

	$('[rel=popup]').live('click', elgg.ui.popupOpen);

	$('.elgg-menu-page .elgg-menu-parent').live('click', elgg.ui.toggleMenu);

	$('.elgg-requires-confirmation').live('click', elgg.ui.requiresConfirmation);

	$('.elgg-autofocus').focus();
};

/**
 * Toggles an element based on clicking a separate element
 *
 * Use rel="toggle" on the toggler element
 * Set the href to target the item you want to toggle (<a rel="toggle" href="#id-of-target">)
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.toggles = function(event) {
	event.preventDefault();

	// @todo might want to switch this to elgg.getSelectorFromUrlFragment().
	var target = $(this).toggleClass('elgg-state-active').attr('href');

	$(target).slideToggle('medium');
};

/**
 * Pops up an element based on clicking a separate element
 *
 * Set the rel="popup" on the popper and set the href to target the
 * item you want to toggle (<a rel="popup" href="#id-of-target">)
 *
 * This function emits the getOptions, ui.popup hook that plugins can register for to provide custom
 * positioning for elements.  The handler is passed the following params:
 *	targetSelector: The selector used to find the popup
 *	target:         The popup jQuery element as found by the selector
 *	source:         The jquery element whose click event initiated a popup.
 *
 * The return value of the function is used as the options object to .position().
 * Handles can also return false to abort the default behvior and override it with their own.
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.popupOpen = function(event) {
	event.preventDefault();
	event.stopPropagation();

	var target = elgg.getSelectorFromUrlFragment($(this).toggleClass('elgg-state-active').attr('href'));
	var $target = $(target);

	// emit a hook to allow plugins to position and control popups
	var params = {
		targetSelector: target,
		target: $target,
		source: $(this)
	};

	var options = {
		my: 'center top',
		at: 'center bottom',
		of: $(this),
		collision: 'fit fit'
	}

	options = elgg.trigger_hook('getOptions', 'ui.popup', params, options);

	// allow plugins to cancel event
	if (!options) {
		return;
	}

	// hide if already open
	if ($target.is(':visible')) {
		$target.fadeOut();
		$('body').die('click', elgg.ui.popupClose);
		return;
	}

	$target.appendTo('body')
		.fadeIn()
		.position(options);

	$('body')
		.die('click', elgg.ui.popupClose)
		.live('click', elgg.ui.popupClose);
};

/**
 * Catches clicks that aren't in a popup and closes all popups.
 */
elgg.ui.popupClose = function(event) {
	$eventTarget = $(event.target);
	var inTarget = false;
	var $popups = $('[rel=popup]');

	// if the click event target isn't in a popup target, fade all of them out.
	$popups.each(function(i, e) {
		var target = elgg.getSelectorFromUrlFragment($(e).attr('href')) + ':visible';
		var $target = $(target);

		if (!$target.is(':visible')) {
			return;
		}

		// didn't click inside the target
		if ($eventTarget.closest(target).length > 0) {
			inTarget = true;
			return false;
		}
	});

	if (!inTarget) {
		$popups.each(function(i, e) {
			var $e = $(e);
			var $target = $(elgg.getSelectorFromUrlFragment($e.attr('href')) + ':visible');
			if ($target.length > 0) {
				$target.fadeOut();
				$e.removeClass('elgg-state-active');
			}
		});

		$('body').die('click', elgg.ui.popClose);
	}
};

/**
 * Toggles a child menu when the parent is clicked
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.toggleMenu = function(event) {
	$(this).siblings().slideToggle('medium');
	$(this).toggleClass('elgg-menu-closed elgg-menu-opened');
	event.preventDefault();
};

/**
 * Initialize the hover menu
 *
 * @param {Object} parent
 * @return void
 */
elgg.ui.initHoverMenu = function(parent) {
	if (!parent) {
		parent = document;
	}

	// avatar image menu link
	$(parent).find(".elgg-avatar").live('mouseover', function() {
		$(this).children(".elgg-icon-hover-menu").show();
	})
	.live('mouseout', function() {
		$(this).children(".elgg-icon-hover-menu").hide();
	});


	// avatar contextual menu
	$(".elgg-avatar > .elgg-icon-hover-menu").live('click', function(e) {
		// check if we've attached the menu to this element already
		var $hovermenu = $(this).data('hovermenu') || null;

		if (!$hovermenu) {
			$hovermenu = $(this).parent().find(".elgg-menu-hover");
			$(this).data('hovermenu', $hovermenu);
		}

		// close hovermenu if arrow is clicked & menu already open
		if ($hovermenu.css('display') == "block") {
			$hovermenu.fadeOut();
		} else {
			$avatar = $(this).closest(".elgg-avatar");

			// @todo Use jQuery-ui position library instead -- much simpler
			var offset = $avatar.offset();
			var top = $avatar.height() + offset.top + 'px';
			var left = $avatar.width() - 15 + offset.left + 'px';

			$hovermenu.appendTo('body')
					.css('position', 'absolute')
					.css("top", top)
					.css("left", left)
					.fadeIn('normal');
		}

		// hide any other open hover menus
		$(".elgg-menu-hover:visible").not($hovermenu).fadeOut();
	});

	// hide avatar menu when user clicks elsewhere
	$(document).click(function(event) {
		if ($(event.target).parents(".elgg-avatar").length == 0) {
			$(".elgg-menu-hover").fadeOut();
		}
	});
};

/**
 * Calls a confirm() and prevents default if denied.
 *
 * @param {Object} e
 * @return void
 */
elgg.ui.requiresConfirmation = function(e) {
	var confirmText = $(this).attr('rel') || elgg.echo('question:areyousure');
	if (!confirm(confirmText)) {
		e.preventDefault();
	}
};

/**
 * Repositions the login popup
 *
 * @param {String} hook    'getOptions'
 * @param {String} type    'ui.popup'
 * @param {Object} params  An array of info about the target and source.
 * @param {Object} options Options to pass to
 *
 * @return {Object}
 */
elgg.ui.loginHandler = function(hook, type, params, options) {
	if (params.target.attr('id') == 'login-dropdown-box') {
		options.my = 'right top';
		options.at = 'right bottom';
		return options;
	}
	return null;
};

/**
 * Initialize the date picker
 *
 * Uses the class .elgg-input-date as the selector.
 *
 * If the class .elgg-input-timestamp is set on the input element, the onSelect
 * method converts the date text to a unix timestamp in seconds. That value is
 * stored in a hidden element indicated by the id on the input field.
 *
 * @return void
 */
elgg.ui.initDatePicker = function() {
	var loadDatePicker = function() {
		$('.elgg-input-date').datepicker({
			// ISO-8601
			dateFormat: 'yy-mm-dd',
			onSelect: function(dateText) {
				if ($(this).is('.elgg-input-timestamp')) {
					// convert to unix timestamp
					var dateParts = dateText.split("-");
					var timestamp = Date.UTC(dateParts[0], dateParts[1] - 1, dateParts[2]);
					timestamp = timestamp / 1000;

					var id = $(this).attr('id');
					$('input[name="' + id + '"]').val(timestamp);
				}
			}
		});
	};
	
	if ($('.elgg-input-date').length && elgg.get_language() == 'en') {
		loadDatePicker();
	} else if ($('.elgg-input-date').length) {
		elgg.get({
			url: elgg.config.wwwroot + 'vendors/jquery/i18n/jquery.ui.datepicker-'+ elgg.get_language() +'.js',
			dataType: "script",
			cache: true,
			success: loadDatePicker,
			error: loadDatePicker // english language is already loaded.
		});
	}
};

elgg.register_hook_handler('init', 'system', elgg.ui.init);
elgg.register_hook_handler('init', 'system', elgg.ui.initDatePicker);
elgg.register_hook_handler('getOptions', 'ui.popup', elgg.ui.loginHandler);

elgg.provide('elgg.ui.widgets');

/**
 * Widgets initialization
 *
 * @return void
 */
elgg.ui.widgets.init = function() {

	// widget layout?
	if ($(".elgg-widgets").length == 0) {
		return;
	}

	$(".elgg-widgets").sortable({
		items:                'div.elgg-module-widget.elgg-state-draggable',
		connectWith:          '.elgg-widgets',
		handle:               '.elgg-widget-handle',
		forcePlaceholderSize: true,
		placeholder:          'elgg-widget-placeholder',
		opacity:              0.8,
		revert:               500,
		stop:                 elgg.ui.widgets.move
	});

	$('.elgg-widgets-add-panel li.elgg-state-available').click(elgg.ui.widgets.add);

	$('a.elgg-widget-delete-button').live('click', elgg.ui.widgets.remove);
	$('.elgg-widget-edit > form ').live('submit', elgg.ui.widgets.saveSettings);
	$('a.elgg-widget-collapse-button').live('click', elgg.ui.widgets.collapseToggle);

	elgg.ui.widgets.setMinHeight(".elgg-widgets");
};

/**
 * Adds a new widget
 *
 * Makes Ajax call to persist new widget and inserts the widget html
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.widgets.add = function(event) {
	// elgg-widget-type-<type>
	var type = $(this).attr('id');
	type = type.substr(type.indexOf('elgg-widget-type-') + "elgg-widget-type-".length);

	// if multiple instances not allow, disable this widget type add button
	var multiple = $(this).attr('class').indexOf('elgg-widget-multiple') != -1;
	if (multiple == false) {
		$(this).addClass('elgg-state-unavailable');
		$(this).removeClass('elgg-state-available');
		$(this).unbind('click', elgg.ui.widgets.add);
	}

	elgg.action('widgets/add', {
		data: {
			handler: type,
			owner_guid: elgg.get_page_owner_guid(),
			context: $("input[name='widget_context']").val(),
			show_access: $("input[name='show_access']").val(),
			default_widgets: $("input[name='default_widgets']").val() || 0
		},
		success: function(json) {
			$('#elgg-widget-col-1').prepend(json.output);
		}
	});
	event.preventDefault();
};

/**
 * Persist the widget's new position
 *
 * @param {Object} event
 * @param {Object} ui
 *
 * @return void
 */
elgg.ui.widgets.move = function(event, ui) {

	// elgg-widget-<guid>
	var guidString = ui.item.attr('id');
	guidString = guidString.substr(guidString.indexOf('elgg-widget-') + "elgg-widget-".length);

	// elgg-widget-col-<column>
	var col = ui.item.parent().attr('id');
	col = col.substr(col.indexOf('elgg-widget-col-') + "elgg-widget-col-".length);

	elgg.action('widgets/move', {
		data: {
			widget_guid: guidString,
			column: col,
			position: ui.item.index()
		}
	});

	// @hack fixes jquery-ui/opera bug where draggable elements jump
	ui.item.css('top', 0);
	ui.item.css('left', 0);
};

/**
 * Removes a widget from the layout
 *
 * Event callback the uses Ajax to delete the widget and removes its HTML
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.widgets.remove = function(event) {
	if (confirm(elgg.echo('deleteconfirm')) == false) {
		event.preventDefault();
		return;
	}
	
	var $widget = $(this).closest('.elgg-module-widget');

	// if widget type is single instance type, enable the add buton
	var type = $widget.attr('class');
	// elgg-widget-instance-<type>
	type = type.substr(type.indexOf('elgg-widget-instance-') + "elgg-widget-instance-".length);
	$button = $('#elgg-widget-type-' + type);
	var multiple = $button.attr('class').indexOf('elgg-widget-multiple') != -1;
	if (multiple == false) {
		$button.addClass('elgg-state-available');
		$button.removeClass('elgg-state-unavailable');
		$button.unbind('click', elgg.ui.widgets.add); // make sure we don't bind twice
		$button.click(elgg.ui.widgets.add);
	}

	$widget.remove();

	// delete the widget through ajax
	elgg.action($(this).attr('href'));

	event.preventDefault();
};

/**
 * Toggle the collapse state of the widget
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.widgets.collapseToggle = function(event) {
	$(this).toggleClass('elgg-widget-collapsed');
	$(this).parent().parent().find('.elgg-body').slideToggle('medium');
	event.preventDefault();
};

/**
 * Save a widget's settings
 *
 * Uses Ajax to save the settings and updates the HTML.
 *
 * @param {Object} event
 * @return void
 */
elgg.ui.widgets.saveSettings = function(event) {
	$(this).parent().slideToggle('medium');
	var $widgetContent = $(this).parent().parent().children('.elgg-widget-content');

	// stick the ajax loader in there
	var $loader = $('#elgg-widget-loader').clone();
	$loader.attr('id', '#elgg-widget-active-loader');
	$loader.removeClass('hidden');
	$widgetContent.html($loader);

	var default_widgets = $("input[name='default_widgets']").val() || 0;
	if (default_widgets) {
		$(this).append('<input type="hidden" name="default_widgets" value="1">');
	}

	elgg.action('widgets/save', {
		data: $(this).serialize(),
		success: function(json) {
			$widgetContent.html(json.output);
		}
	});
	event.preventDefault();
};

/**
 * Set the min-height so that all widget column bottoms are the same
 *
 * This addresses the issue of trying to drag a widget into a column that does
 * not have any widgets or many fewer widgets than other columns.
 *
 * @param {String} selector
 * @return void
 */
elgg.ui.widgets.setMinHeight = function(selector) {
	var maxBottom = 0;
	$(selector).each(function() {
		var bottom = parseInt($(this).offset().top + $(this).height());
		if (bottom > maxBottom) {
			maxBottom = bottom;
		}
	})
	$(selector).each(function() {
		var bottom = parseInt($(this).offset().top + $(this).height());
		if (bottom < maxBottom) {
			var newMinHeight = parseInt($(this).height() + (maxBottom - bottom));
			$(this).css('min-height', newMinHeight + 'px');
		}
	})
};

elgg.register_hook_handler('init', 'system', elgg.ui.widgets.init);


elgg.version = '2013012900';
elgg.release = '1.8.13';
elgg.config.wwwroot = 'http://23.253.234.232/';
elgg.security.interval = 5 * 60 * 1000;
elgg.config.domReady = false;
elgg.config.language = 'en';
elgg.config.languageReady = false;

//After the DOM is ready
$(function() {
	elgg.config.domReady = true;
	elgg.initWhenReady();
});


// force the first column to at least be as large as the profile box in cols 2 and 3
// we also want to run before the widget init happens so priority is < 500
elgg.register_hook_handler('init', 'system', function() {
	// only do this on the profile page's widget canvas.
	if ($('.profile').length) {
		$('#elgg-widget-col-1').css('min-height', $('.profile').outerHeight(true) + 1);
	}
}, 400);

// messages plugin toggle
elgg.register_hook_handler('init', 'system', function() {
	$("#messages-toggle").click(function() {
		$('input[type=checkbox]').click();
	});
});

elgg.provide('elgg.uservalidationbyemail');

elgg.uservalidationbyemail.init = function() {
	$('#uservalidationbyemail-checkall').click(function() {
		var checked = $(this).attr('checked') == 'checked';
		$('#uservalidationbyemail-form .elgg-body').find('input[type=checkbox]').attr('checked', checked);
	});

	$('.uservalidationbyemail-submit').click(function(event) {
		var $form = $('#uservalidationbyemail-form');
		event.preventDefault();

		// check if there are selected users
		if ($('#uservalidationbyemail-form .elgg-body').find('input[type=checkbox]:checked').length < 1) {
			return false;
		}

		// confirmation
		if (!confirm($(this).attr('title'))) {
			return false;
		}

		$form.attr('action', $(this).attr('href')).submit();
	});
};

elgg.register_hook_handler('init', 'system', elgg.uservalidationbyemail.init);

/**
 * Repositions the likes popup
 *
 * @param {String} hook    'getOptions'
 * @param {String} type    'ui.popup'
 * @param {Object} params  An array of info about the target and source.
 * @param {Object} options Options to pass to
 *
 * @return {Object}
 */
elgg.ui.likesPopupHandler = function(hook, type, params, options) {
	if (params.target.hasClass('elgg-likes')) {
		options.my = 'right bottom';
		options.at = 'left top';
		return options;
	}
	return null;
};

elgg.register_hook_handler('getOptions', 'ui.popup', elgg.ui.likesPopupHandler);
elgg.provide('elgg.bookmarks');

elgg.bookmarks.init = function() {
	// append the title to the url
	var title = document.title;
	var e = $('a.elgg-bookmark-page');
	var link = e.attr('href') + '&title=' + encodeURIComponent(title);
	e.attr('href', link);
};

elgg.register_hook_handler('init', 'system', elgg.bookmarks.init);

// this adds a class to support IE8 and older
elgg.register_hook_handler('init', 'system', function() {
	// jQuery uses 0-based indexing
	$('#groups-tools').children('li:even').addClass('odd');
});
// this adds a class to support IE8 and older
elgg.register_hook_handler('init', 'system', function() {
	// jQuery uses 0-based indexing
	$('#projects-tools').children('li:even').addClass('odd');
	
	$('.preview-welcome-message').click(function(event) {
		event.preventDefault();
		
		tinyMCE.triggerSave();
		
		var content = $('#welcome_message').val();
		var fancybox_content = '<div class="projectsWelcomeMessageContent">';
		fancybox_content += content;
		fancybox_content += '</div>';
		
		$.fancybox({
			content: fancybox_content
		});
	});
    
    $('a.js_projects_search').live('click touchend', function(event) {
        event.preventDefault();
        
        $('form.elgg-form-projects-find .elgg-input-search').focus();
    });
});
//<script>
$(document).ready(function() {
	
	/* show / hide filter list */
	/* for css */
	$('.filterInnerGroup label').last().addClass('filterLastItem');	
	/* menu */
	$('.rdfTitle').live('click', function() {
			$('.rdfMn').show();
		}
	);
	$('html').live('click', function() {
			$('.rdfMn').hide();
		}
	);
	$('.rdfTitle').live('click', function(event) {
			event.stopPropagation();
		}
	);
	
	// Function to delete a friend in a circle.
	var delete_friend_circle = function(event) {
		event.preventDefault();

		// Get element 'a'
		var $aDeleteFriend = $(this);

		// Get the url to delete a friend
		var delete_url = $aDeleteFriend.attr('href');

		var fancybox_message = 'not content';

		$.getJSON(delete_url, function(data) {
			if (data.error) {
				fancybox_message = data.error;
			} else {
				// Update count friends
				var $cir = $aDeleteFriend.parents('.cCircle');
				$('.count_friends', $cir).text(data.count_friends);

				// Remove friend
				//$aDeleteFriend.parent().parent().parent().remove();
				$aDeleteFriend.parents('li').remove();

				fancybox_message = data.success_msg;
			}

			$.fancybox({
				'transitionIn'	:	'elastic',
				'transitionOut'	:	'elastic',
				'speedIn'		:	600,
				'speedOut'		:	200,
				'overlayShow'	:	true,
				'content'		:	fancybox_message,
				'onStart'		: 	function() { $('#fancybox-wrap, #fancybox-outer, #fancybox-content').addClass('ktCirclesFancyBox'); },
				'onClosed'		: 	function() { $('#fancybox-wrap, #fancybox-outer, #fancybox-content').removeClass('ktCirclesFancyBox'); }
			});
		});
	}
	// Apply function 'delete_friend_circle' to all element with class 'deleteFriend'
	$(".deleteFriend").click(delete_friend_circle);

	// there's the list of friends and the circles
	var $listFriends = $(".listFriends");
	var $circles = $(".cCircle");

	// let the list of friends items be draggable
	$( "li", $listFriends ).draggable({
		helper: "clone",
		revert: "invalid" // when not dropped, the item will revert back to its initial position
		//cancel: "a.ui-icon" // clicking an icon won't initiate dragging
		//containment: $( "#demo-frame" ).length ? "#demo-frame" : "document", // stick to demo-frame if present
		//cursor: "move"
	});

	// let the circle be droppable, accepting the list of friends items
	$circles.droppable({
		accept: ".listFriends > li",
		activeClass: "ui-state-highlight",
		drop: function( event, ui ) {
			event.preventDefault();

			// Get circle
			var $circle = $(this);

			// Get item draggable
			var $item_drag = ui.draggable;

			// Get id friend to add to the circle
			var friend_id = $item_drag.find(".friendId").val();

			// Get id circle to add the friend
			var circle_id = $circle.find(".circleId").val();

			var ajax_url = 'http://23.253.234.232/mod/circles/endpoint/addfriend.php?callback=1&circle_id='+circle_id+'&friend_id='+friend_id+"&rand="+1693581967;

			var fancybox_message = 'not content';

			$.getJSON(ajax_url, function(data) {
				if (data.error) {
					fancybox_message = data.error;
				} else {
					var $list = $("ul", $circle).length ?
						$("ul", $circle) :
						$("<ul class='listFriendsCircle'/>").appendTo($circle);

					// Count friend in circles
					var count_friends = $("li", $list).length;

					if (count_friends < 6) {
						// link for delete friends
						var delete_url = 'http://23.253.234.232/mod/circles/endpoint/deletefriend.php?callback=1&circle_id='+circle_id+'&friend_id='+friend_id+"&rand="+1833335983;
						var removeFriend = "<div class='deleteFriendCont'><a class='deleteFriend' href='"+delete_url+"'>-</a></div>";

						$item_drag.fadeOut(function() {

							// Add friend item to circle
							$item_drag.find(".nameFriend").remove();	// remove name friend
							$item_drag.find(".cFriend").append(removeFriend);	// add link for delete friends
							$item_drag.find(".deleteFriend").click(delete_friend_circle);	// add function to the link previous
							$item_drag.appendTo($list).fadeIn(function() {	// animate when add item, apply style
								$item_drag.animate({ width: "45px" })
								.find( "img" )
								.animate({ height: "100%" });
							});
						});
					} // Fin del if

					// Update count friends
					$(".count_friends", $circle).text(data.count_friends);

					fancybox_message = data.success_msg;
				}

				$.fancybox({
					'transitionIn'	:	'elastic',
					'transitionOut'	:	'elastic',
					'speedIn'		:	600,
					'speedOut'		:	200,
					'overlayShow'	:	true,
					'content'		:	fancybox_message,
					'onStart'		: 	function() { $('#fancybox-wrap, #fancybox-outer, #fancybox-content').addClass('ktCirclesFancyBox'); },
					'onClosed'		: 	function() { $('#fancybox-wrap, #fancybox-outer, #fancybox-content').removeClass('ktCirclesFancyBox'); }
				});
				//end of json call
			});
		}
	});

	// let the list of friends be droppable as well, accepting items from the circles
	$listFriends.droppable({
		accept: ".listFriendsCircle > li",
		activeClass: "custom-state-active",
		drop: function( event, ui ) {
			//recycleImage( ui.draggable );
		}
	});
	
	
	$('#btnShowHideSrchFrm').click(
		function() {
			if(!$('.ktHiddenSrchFrm').is(':animated')) {
				$('.ktHiddenSrchFrm').slideToggle();
				$(this).toggleClass('on');
			}
			return false;
		}
	);
	
	// Get content riverdashboard
	var circles_get_riverdashboard = function() {

		var circle = $('input[name=filter_circles]:checked').val();
		var type = $('input[name=filter_types]:checked').val();
		
		var circle_id = '';
		if (circle != 'all' &&
			circle != 'mine' &&
			circle != 'friends') {
			circle_id = circle;
			circle = 'circles';
		}
		
		var type_subtype = type.split('-');
		var type = '';
		var subtype = '';
		if (type_subtype.length > 0) {
			type = type_subtype[0];
		}
		if (type_subtype.length > 1) {
			subtype = type_subtype[1];
		}
		
//		var url = 'http://23.253.234.232/mod/circles/pages/riverdashboard/index.php?display='+$circle+'&content='+$type+'&callback=true';
		var url = 'http://23.253.234.232/activity/'+circle+'?type='+type+'&subtype='+subtype+'&circle_id='+circle_id;

		$('.circlesAjaxLoader').addClass('currentlyLoading');
		
		var $parentWrapper = $('.riverdashboardFilter').parents('.elgg-main.elgg-body');
		$parentWrapper.load(url, function(){
			$('.circlesAjaxLoader').removeClass('currentlyLoading');
		});
	}
	$('input[name=filter_circles]').live('click', function() {
		circles_get_riverdashboard();
	});
	$('input[name=filter_types]').live('click', function() {
		circles_get_riverdashboard();
	});
});//<script>
	elgg.provide('elgg.top_notifications');
	elgg.top_notifications.notifications_enabled = 1;
	elgg.top_notifications.messages_enabled = 1;
	elgg.top_notifications.friend_request_enabled = 1;

	/* hide similar items */
	function notificationsListHide() {
		$('.reqList').hide();
		$('.divIco.on').removeClass('on');
		$('.reqIco.on').removeClass('on');
		// hide other menus
		$('.sMnTop.hover').removeClass('hover');
		$('.sMnUl').hide();
	}
	
	$(document).ready(
	function() {
		/* menu or lists show/hide */
		function listShow(mn_list, elementToShow) {
			mn_list.show();
			elementToShow.addClass('on');
			elementToShow.parent().addClass('on');
		}
		$('.divIco').click(
			function() {
				var mn_list = $(this).parent().find('.reqList');
				if(mn_list.length) {
					if(mn_list.is(':visible')) {
						return false;
					}
					/* hide visible menus */
					if(typeof window.notificationsListHide == 'function') {
						notificationsListHide();	// hide other notifications list
					}
					if(typeof window.hideUserMn == 'function') {
						hideUserMn();				// hide user menu
					}
					if(typeof window.hideCommonMn == 'function') {
						hideCommonMn();				// hide any common menu
					}
					/* show this list */
					listShow(mn_list, $(this));
				}
			}
		);
		$('html').click(
			function() {
				notificationsListHide();
			}
		);
		$('.divIco, .reqList').click(
			function(event){
				event.stopPropagation();
			}
		);
            
		/* items hover IE7 */
		$('.reqItem').mouseenter(
			function() {
				$(this).addClass('hover');
			}
		).mouseleave(
			function() {
				$(this).removeClass('hover');
			}
		);
            
		/* message list click */
		$('.messageListTop .reqItem').click(
			function() {
				var the_a = $(this).find('.notMessage a');
				window.location = the_a.attr('href');
			}
		);
				
		// Highlight to newest notifications
		$('.divIco').click(function () {
			// Highlight
			var to_highlight = $('ul.topNotifications .reqList').find('.newestTopNotifications');

			if (to_highlight.length > 0) {
				to_highlight.each(function(index, element) {
					if (typeof(elgg.highlight_element) == 'function') {
						elgg.highlight_element(element);
						$(element).removeClass('newestTopNotifications');
					}
				});
			}
		});

		/* Notifications section: Enable it */
		if(elgg.top_notifications.notifications_enabled) {
			// Mark read notifications
			$('ul.topNotifications .icoNotifications').click(function(){
				var $count =  parseInt($('ul.topNotifications .icoNotifications .count .counter').html());
				if ($count > 0) {
					$.ajax({
						url: 'http://23.253.234.232/mod/top_notifications/endpoint/mark_read_notification.php',
						dataType: 'json',
						success: function(data){
							if (!data.error) {
								$('ul.topNotifications .icoNotifications .count').addClass('no');
								$('ul.topNotifications .icoNotifications .count .counter').html("0");
							}
						}
					});
				}
			});

			// New notifications consultation
			if (elgg.is_logged_in()) {
				var top_notifications_notifications_interval = 1000 * 30;
				var top_notifications_notifications_interval_id = setInterval(function(){
					$.ajax({
						url: 'http://23.253.234.232/mod/top_notifications/endpoint/check_for_new_notifications.php',
						dataType: 'json',
						success: function(data){
							if (data) {
								if (data.count && parseInt(data.count) > 0) {
									if ($('ul.topNotifications .icoNotifications .count .counter').length &&
										$('ul.topNotifications .listNotifications h2').length) {
										$('ul.topNotifications .icoNotifications .count').removeClass('no');
										$('ul.topNotifications .icoNotifications .count .counter').html(data.count);
										if (data.notifications != 'undefined') {
											$('ul.topNotifications .listNotifications .reqItem').remove();
											$('ul.topNotifications .listNotifications .riEmpty').remove();
											$('ul.topNotifications .listNotifications h2').after(data.notifications);
										}
									}
								}
							}
						}
					});
				}, top_notifications_notifications_interval);
			} 
		}
    }
);//<script>
elgg.provide('elgg.bbbintegration');

elgg.bbbintegration.next_requests_talks = false;

elgg.bbbintegration.init = function() {

    // Check for talks
    if(elgg.is_logged_in()) {
		elgg.bbbintegration.check_for_requests_talks();

		$('a.request-talk').live('click', function(event) {
			elgg.bbbintegration.request_talk($(this), event);
		});

		$('a.talk-accept').live('click', function(event) {
			elgg.bbbintegration.accept_talk($(this), event);
		});

		$('a.talk-decline').live('click', function(event) {
			elgg.bbbintegration.decline_talk($(this), event);
		});

		$('a.talk-decline-accept').live('click', function(event) {
			elgg.bbbintegration.decline_talk_accept($(this), event);
		});

//		$('a.talk-down').live('click', function(event) {
//			elgg.bbbintegration.down_talk($(this), event);
//		});
	}

};

elgg.bbbintegration.before_unload_window = function() {

	$(window).bind('beforeunload', function(){ 
		return elgg.echo('meeting:talk:unload');
	});

}

elgg.bbbintegration.resize_iframe = function() {

    var id = 'bbbintegration-wrapper';

    document.getElementById(id).height = $(window).height();

}

elgg.bbbintegration.check_for_requests_talks = function() {

    var interval = 1000*8; // 8 seg.

    var interval_id = setInterval(elgg.bbbintegration.get_requests_talks, interval);

    //elgg.opentok.get_requests_talks();

}

elgg.bbbintegration.get_requests_talks = function() {

	if (elgg.bbbintegration.next_requests_talks) {
		elgg.bbbintegration.next_requests_talks = false;
		return;
	}

	var fancybox_opened = false;
	var in_talk = false;

	var fancybox_wrap = $('#fancybox-wrap');
	if (fancybox_wrap.length > 0) {
		fancybox_opened = fancybox_wrap.is(':visible');
	}

	// Valido si estoy en la ventana de conversacion, si estoy, no chequeo
	// por solicitudes de conversacion
	if ($('.elgg-layout-talk').length > 0) {
		in_talk = true;
	}
    
    if (!fancybox_opened && !in_talk) {
        var time = new Date().getTime();
        $.ajax({
    		dataType: 'json',
            cache: false,
            url: elgg.get_site_url()+'meeting/check_for_requests_talks?t='+time,
            success: function(data) {
				var content = '';

				if (data.request_talk) {
					content = data.request_talk;
				}
				else {
					if (data.accept_talk) {
						content = data.accept_talk;
					}
					else {
						if (data.decline_talk) {
							content = data.decline_talk;
						}
						else {
//							$.fancybox.close();
						}
					}
				}

                if (content) {
                    $.fancybox({
                        modal: true,
                        content: content,
    					padding: '5px'
                    });

                    // Play sound
                    if (typeof(swfobject) == 'object') {
                        var url_sound = "http://23.253.234.232/mod/bbbintegration/sounds/new%5Frequest%5Ffor%5Ftalk.player.swf?soundswf=http://23.253.234.232/mod/bbbintegration/sounds/new%5Frequest%5Ffor%5Ftalk.swf&autoplay=1&loops=0";
                        swfobject.embedSWF(url_sound, "meeting-request-talk-sound", "1", "1", "9.0.0");
                    }
                }
//    			if (data.online_users) {
//					if ($('.bodyActivity .meeting-users-opentok .elgg-body')) {
//						var widget_content = $('.bodyActivity .online-users-meeting .elgg-body').first();
//						widget_content.html(data.online_users);
//					}
//                }
            }
        });
    }

}

elgg.bbbintegration.request_talk = function(el, event) {

    event.preventDefault();

    var url = $(el).attr('href');

    $.ajax({
        url: url,
        dataType: 'json',
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                elgg.register_error(data.system_messages.error);
            }
            else {
                if (data.system_messages.success.length > 0) {
                    elgg.system_message(data.system_messages.success);
                }
            }
        }
    });

}

elgg.bbbintegration.accept_talk = function(el, event) {

	elgg.bbbintegration.next_requests_talks = true;

    $.fancybox.close();

}

elgg.bbbintegration.decline_talk = function(el, event) {

    event.preventDefault();

    var url = $(el).attr('href');

    $.ajax({
        url: url,
        dataType: 'json',
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                elgg.register_error(data.system_messages.error);
            }
            else {
                if (data.system_messages.success.length > 0) {
                    elgg.system_message(data.system_messages.success);
                }
            }
        }
    });

    $.fancybox.close();

}

elgg.bbbintegration.decline_talk_accept = function(el, event) {

    event.preventDefault();

    var url = $(el).attr('href');

    $.ajax({
        url: url,
        dataType: 'json',
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                elgg.register_error(data.system_messages.error);
            }
            else {
                if (data.system_messages.success.length > 0) {
                    elgg.system_message(data.system_messages.success);
                }
            }
        }
    });

    $.fancybox.close();

}

//elgg.bbbintegration.down_talk = function(el, event) {
//
//	event.preventDefault();
//
//	window.close();
//
//}

elgg.register_hook_handler('init', 'system', elgg.bbbintegration.init);
//<script>
elgg.provide('elgg.gdrive');

elgg.gdrive.saving_document = false;

elgg.gdrive.init = function() {
	
	// Add class 'gdrive-auth-no'
		$('.gdrive-auth').addClass('gdrive-auth-no');
		
	$('form.gdrive-auth').submit(function() {
		
		if ($(this).hasClass('gdrive-auth-no')) {
			window.open('http://23.253.234.232/gdrive/authenticate', 'gdrive_authenticate', "location=1,status=0,scrollbars=0,width=800,height=570");
			$(this).removeClass('gdrive-auth-no');
			$(this).addClass('gdrive-auth-yes');
			return false;
		}
	
	});
	
	$('a.gdrive-auth.gdrive-sync').live('click touchend', function(event) {
		
		if ($(this).hasClass('gdrive-auth-no')) {
			window.open('http://23.253.234.232/gdrive/authenticate', 'gdrive_authenticate', "location=1,status=0,scrollbars=0,width=800,height=570");
			$(this).removeClass('gdrive-auth-no');
			$(this).addClass('gdrive-auth-yes');
			event.preventDefault();
		}
		
	});
    
    $('a.gdrive-delete.gdrive-requires-confirmation').attr('rel', elgg.echo('deleteconfirm'));
    $('a.gdrive-auth.gdrive-google').live('click touchend', function(event) {
		
        var success = true;
        if ($(this).hasClass('gdrive-requires-confirmation') && !$(this).hasClass('gdrive-requires-confirmation-yes')) {
           var rel = $(this).attr('rel'); 
           success = confirm(rel);
           
           if (success) {
               $(this).addClass('gdrive-requires-confirmation-yes');
           }
        }
        else {
            if ($(this).hasClass('gdrive-requires-confirmation') && $(this).hasClass('gdrive-requires-confirmation-yes')) {
                $(this).addClass('gdrive-delete-yes');
            }
        }
        
		if (success && $(this).hasClass('gdrive-auth-no')) {
			window.open('http://23.253.234.232/gdrive/authenticate', 'gdrive_authenticate', "location=1,status=0,scrollbars=0,width=800,height=570");
			$(this).removeClass('gdrive-auth-no');
			$(this).addClass('gdrive-auth-yes');
            
			event.preventDefault();
		}
		
	});
    
    $('a.gdrive-delete').live('click touchend', elgg.gdrive.delete_document);
    
    $('table.list-documents-google tbody tr.item-list').live('click touchend', elgg.gdrive.import_document_google);
	
    $(window).bind('beforeunload', elgg.gdrive.before_unload_window);
};

elgg.gdrive.before_unload_window = function() {

	if (elgg.gdrive.saving_document) {
        return '';
    }

}

elgg.gdrive.save_document = function(href) {
    
    var interval = 1000*10; // 10 seg.

    var interval_id = setInterval(function() {
        if (href && !elgg.gdrive.saving_document) {
            var time = new Date().getTime();
            var url = href + '&t' + time;
            elgg.gdrive.saving_document = true;
            $.ajax(url, {
                dataType: 'json',
                cache: false,
                success: function(data) {
                    elgg.gdrive.saving_document = false;
                    if (typeof(data.success) == 'string' && data.success == 'yes') {
                        if (typeof(data.title) == 'string') {
                            $(document).attr('title', data.title);
                        }
                    }
                }
            });
        }
    }, interval);
    
}

elgg.gdrive.create_document = function() {
    
    var href = window.location.href;
    
    if (href.indexOf('?') == -1) {
        href += '?c=yes';
    }
    else {
        href += '&c=yes';
    }
    
    $.ajax(href, {
        dataType: 'json',
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                elgg.register_error(data.system_messages.error);
                $('.loading-wrapper').addClass('hidden');
            }
            else {
                var output = data.output;
                if (output.forward) {
                    window.location.replace(output.forward);
                }
//                elgg.system_message(data.system_messages.success);
            }
        }
    });
    
}

elgg.gdrive.load_documents = function() {

    var href = elgg.get_site_url() + 'gdrive/loaddocuments/' + elgg.get_page_owner_guid();

    $.ajax(href, {
        dataType: 'json',
        success: function(data) {
            $('.loading-wrapper.load-document').addClass('hidden');
            if (data.system_messages.error.length > 0) {
                elgg.register_error(data.system_messages.error);
            }
            else {
                var output = data.output;
                $('.import-google-wrapper').append(output);
//                elgg.system_message(data.system_messages.success);
            }
        }
    });

}

elgg.gdrive.import_document_google = function(event) {
    
    $('.loading-wrapper.import-document').removeClass('hidden');
    $('.list-document-wrapper').addClass('hidden');
    
    var $tr = $(this);
    var $form = $('.elgg-form-gdrive-importgoogle');
    
    var file_id = $tr.data('file-id');
    var $file_id_input = $('input[name=file_id]', $form);
    $file_id_input.val(file_id);
    
    var action = $form.attr('action');
    var options = {
        data: $form.serialize(),
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                $('.loading-wrapper.import-document').addClass('hidden');
                $('.list-document-wrapper').removeClass('hidden');
//                elgg.register_error(data.system_messages.error);
//                $('.loading-wrapper').addClass('hidden');
            }
            else {
                var output = data.output;
                if (output.forward) {
                    window.location.replace(output.forward);
                }
//                elgg.system_message(data.system_messages.success);
            }
        }
    };
    
    elgg.action(action, options);
    
}

elgg.gdrive.delete_document = function(event) {

    event.preventDefault();

    var link = $(this);

    if (!$(link).hasClass('gdrive-delete-yes')) {
        return false;
    }
    if (!$(this).hasClass('gdrive-requires-confirmation-yes')) {
        if(!confirm($(this).attr('rel'))) {
            return false;
        }
    }

    //var deleting_file = "<div class=\"loading-wrapper \">\r\n    <p>Deleting file...<\/p>\r\n        <div class=\"clearfix\"><\/div>\r\n<\/div>";

    var elgg_item = $(link).parents('.elgg-item');

    if (elgg_item.length > 0) {
        elgg_item.addClass('ajax-loading');
    }

    var action = $(link).attr('href');
    var options = {
        dataType: 'json',
        success: function(data) {
            if (data.system_messages.success.length > 0) {
                window.location.href = elgg.get_site_url() + 'gdrive/group/' + elgg.get_page_owner_guid() + '/all';
            }
            else {
                 $(link).removeClass('gdrive-requires-confirmation-yes');
                 $(link).removeClass('gdrive-delete-yes');
                 $(link).removeClass('gdrive-auth-yes');
                 $(link).addClass('gdrive-auth-no');
                 elgg_item.removeClass('ajax-loading');
            }
        }
    };
    elgg.action(action, options);
    
};

elgg.register_hook_handler('init', 'system', elgg.gdrive.init);//<script>
elgg.provide('elgg.gcalendar');

elgg.gcalendar.init = function() {
	
	$('.ktFormmeeting form').addClass('gcalendar-auth');
	$('.ktFormmeeting form').addClass('gcalendar-auth-no');
	
	$('form.gcalendar-auth').submit(function() {
		
		if ($(this).hasClass('gcalendar-auth-no')) {
			window.open('http://23.253.234.232/gcalendar/authenticate', 'gcalendar_authenticate', "location=1,status=0,scrollbars=0,width=800,height=570");
			$(this).removeClass('gcalendar-auth-no');
			$(this).addClass('gcalendar-auth-yes');
			return false;
		}
	
	});
	
	$('a.gcalendar-auth.gcalendar-sync, a.gcalendar-auth.import-gcalendar, a.gcalendar-auth.gcalendar-events').click(function(event) {
		
		if ($(this).hasClass('gcalendar-auth-no')) {
			window.open('http://23.253.234.232/gcalendar/authenticate', 'gcalendar_authenticate', "location=1,status=0,scrollbars=0,width=800,height=570");
			$(this).removeClass('gcalendar-auth-no');
			$(this).addClass('gcalendar-auth-yes');
			event.preventDefault();
		}
		
	});
    
    $('.import-gcalendar').live('click touchend', elgg.gcalendar.import_from_google);
    
    $('table.list-gcalendar-google tbody tr.item-list').live('click touchend', elgg.gcalendar.import_calendar);
	
    $('ul.gcalendars-ul input.elgg-input-checkbox').live('click touchend', elgg.gcalendar.show_hide_events);
}

/**
 * Import From Google 
 */
elgg.gcalendar.import_from_google = function(event) {

    var $el = $(this);
    
    if (!$el.hasClass('import-gcalendar-yes')) {
        $el.addClass('import-gcalendar-yes');
        return false;
    }

    var href = elgg.get_site_url() + 'gcalendar/import';
    
    $.fancybox({
        href: href
    });

}

elgg.gcalendar.import_calendar = function(event) {
    
    $.fancybox.showActivity();
    
    var $tr = $(this);
    var $form = $('.elgg-form-gcalendar-import');
    
    // Calendar id
    var calendar_id = $tr.data('calendar-id');
    var $calendar_id_input = $('input[name=calendar_id]', $form);
    $calendar_id_input.val(calendar_id);
    
    var action = $form.attr('action');
    var options = {
        data: $form.serialize(),
        success: function(data) {
            if (data.system_messages.error.length > 0) {
                // Nothing...
            }
            else {
//                var output = data.output;
//                $('#calendars-widget-box .calendar-list-widget').html(output);
                  window.location.reload();
            }
            $.fancybox.hideActivity();
            $.fancybox.close();
        }
    };
    
    elgg.action(action, options);
    
}

elgg.gcalendar.show_hide_events = function() {

    // Element
    var $el = $(this);
    
    // Value
    var value = $el.val();
    
    if ($el.is(':checked')) {
        // Show events
        $('.fc-event[rel="'+value+'"]').show();
    }
    else {
        // Hide events
        $('.fc-event[rel="'+value+'"]').hide();
    }

}

//elgg.gcalendar.get_events = function() {
//
//    var $el = $(this);
//    var $parent = $el.parent('label');
//    
//    // Add loading
//    $el.css('visibility', 'hidden');
//    $parent.addClass('ajax-loading');
//    
//    // Value
//    var value = $el.val();
//    
//    var href = elgg.get_site_url() + 'gcalendar/getevents';
//    var data = {
//        calendar_id: value
//    };
//    var options = {
//        data: data,
//        success: function(data) {
//            
//            $el.css('visibility', 'visible');
//            $parent.removeClass('ajax-loading');
//        }
//    };
//    $.ajax(href, options);
//
//}

elgg.register_hook_handler('init', 'system', elgg.gcalendar.init);//<script>
elgg.provide('elgg.social_import_contacts');

elgg.social_import_contacts.init = function () {
	
	// Social Import Contacts
	$('a.social_import_contacts').fancybox();
	
}

elgg.register_hook_handler('init', 'system', elgg.social_import_contacts.init);//<script>

elgg.provide('elgg.anypage');

elgg.anypage.init = function() {
	$('#anypage-use-view').change(function() {
		var $this = $(this);

		if ($this.is(":checked")) {
			$('#anypage-description').hide();
			$('#anypage-view-info').show();
		} else {
			$('#anypage-description').show();
			$('#anypage-view-info').hide();
		}
	});

	// @todo HTML5 browsers only. Not sure I care...
	$('#anypage-path').bind('input', elgg.anypage.updatePath);
	
	// open in new tab
	$('a.anypage-updates-on-path-change').click(function(e) {
		e.preventDefault();
		window.open($(this).attr('href'));
	});
}

elgg.anypage.updatePath = function() {
	var $this = $(this);
	var val = $this.val();
	val = val.ltrim('/');
	// we don't have rtrim?
	if (val.lastIndexOf('/') === val.length - 1) {
		val = val.substring(0, val.length - 1);
	}
	val = '/' + val;

	$('a.anypage-updates-on-path-change')
		.attr('href', elgg.normalize_url(val))
		.html(elgg.normalize_url(val));
	$('span.anypage-updates-on-path-change').html(val);
}

/**
 * Updates the url into a anypage text. With format [site_url]
 */
elgg.anypage.updateTemplatesUrl = function() {

}

elgg.register_hook_handler('init', 'system', elgg.anypage.init);//<script>
	/**
	 * Responsive main js
	 */
	elgg.provide('elgg.responsive');

	elgg.responsive.init = function() {
		elgg.responsive.section_menu();
	};

	elgg.responsive.section_menu = function() {
        
        // Destroy datepickers
        $('.elgg-input-date').datepicker('destroy');
        
		var sidebar = $('.sideBarsContainer');
        
		if (typeof(sidebar) === 'undefined' || sidebar.length === 0) {
			sidebar = $('.elgg-admin-sidebar-menu');
			
			if (typeof(sidebar) === 'undefined' || sidebar.length === 0) {
				return false;
			}
			
			var the_html = sidebar.html();
		} else {
			var the_html = sidebar.find('.elgg-sidebar').html();
		}

		if (the_html && the_html.length) {

			var section_menu = $('.subMnCont .h2titleShowSidebar').length;
			var wrapper = $('.mainContentsTitle').find('.elgg-sidebar');

			wrapper.html(the_html);
            
            // Change ids to datepickers
            var datepickers = $(wrapper).find('.elgg-input-date');
            if (datepickers.length) {
                var i = 1;
                $.each(datepickers, function(index, value) {
                    var id = $(value).attr('id');
                    id = id + '_' + i;
                    $(value).attr('id', id);
                    i++;
                });
            }
		}
        
        // Init datepickers
        elgg.ui.initDatePicker();

	};

	elgg.register_hook_handler('init', 'system', elgg.responsive.init);

elgg.provide('elgg.help_texts');

elgg.help_texts.init = function() {
	// append the title to the url
	var title = document.title;
	var e = $('a.elgg-help_text-page');
	var link = e.attr('href') + '&title=' + encodeURIComponent(title);
	e.attr('href', link);
};

elgg.register_hook_handler('init', 'system', elgg.help_texts.init);

	elgg.provide('elgg.fine_uploader');

	elgg.fine_uploader.init = function() {

		// inserts the fine_uploader content into the textarea
		$(".fine_uploader-item").live('click', elgg.fine_uploader.insert);

		// caches the current textarea id
		$(".fine_uploader-control").live('click', function(event) {
            event.preventDefault();
            
			var classes = $(this).attr('class');
			var fine_uploaderClass = classes.split(/[, ]+/).pop();
			var textAreaId = fine_uploaderClass.substr(fine_uploaderClass.indexOf('fine_uploader-control-') + "fine_uploader-control-".length);
			elgg.fine_uploader.textAreaId = textAreaId;
            
		});

		// special pagination helper for lightbox
//	$('.fine_uploader-wrapper .elgg-pagination a').live('click', elgg.fine_uploader.forward);

//	$('.fine_uploader-section').live('click', elgg.fine_uploader.forward);

		$('.elgg-form-fine_uploader').live('submit', elgg.fine_uploader.submit);
	};

	elgg.fine_uploader.embedContent = function(content) {
		
	
		var textAreaId = elgg.fine_uploader.textAreaId;
		var textArea = $('#' + textAreaId);
		
		if (content.indexOf('thumbnail.php') != -1) {
			content = content.replace('size=small', 'size=medium');
		}

		textArea.val(textArea.val() + content);
		textArea.focus();

		if (window.tinyMCE) {
		var editor = window.tinyMCE.get(textAreaId);

		if (editor) {

			// work around for IE/TinyMCE bug where TinyMCE loses insert carot
			if ($.browser.msie) {
				editor.focus();
				editor.selection.moveToBookmark(elgg.tinymce.bookmark);
			}

			editor.execCommand("mceInsertContent", true, content);
		}
	}

		$.fancybox.close();

		event.preventDefault();
	};

	/**
	 * Inserts data attached to an fine_uploader list item in textarea
	 *
	 * @todo generalize lightbox closing
	 *
	 * @param {Object} event
	 * @return void
	 */
	elgg.fine_uploader.insert = function(event) {
		

		// generalize this based on a css class attached to what should be inserted
		var content = ' ' + $(this).find(".fine_uploader-insert").parent().html() + ' ';

		// this is a temporary work-around for #3971
		elgg.fine_uploader.embedContent(content);
	};




	/**
	 * Submit an upload form through Ajax
	 *
	 * Requires the jQuery Form Plugin. Because files cannot be uploaded with
	 * XMLHttpRequest, the plugin uses an invisible iframe. This results in the
	 * the X-Requested-With header not being set. To work around this, we are
	 * sending the header as a POST variable and Elgg's code checks for it in
	 * elgg_is_xhr().
	 *
	 * @param {Object} event
	 * @return bool
	 */
	elgg.fine_uploader.submit = function(event) {
		$('.fine_uploader-wrapper .elgg-form-file-upload').hide();
		$('.fine_uploader-throbber').show();

		$(this).ajaxSubmit({
			dataType: 'json',
			data: {'X-Requested-With': 'XMLHttpRequest'},
			success: function(response) {

				if (response) {
					if (response.system_messages) {
						elgg.register_error(response.system_messages.error);
						elgg.system_message(response.system_messages.success);
					}
					if (response.status >= 0) {
//					var forward = $('input[name=fine_uploader_forward]').val();
//					var url = elgg.normalize_url('fine_uploader/tab/' + forward);
//					url = elgg.fine_uploader.addContainerGUID(url);
//					$('.fine_uploader-wrapper').parent().load(url);

						var output = ' ' + response.output + ' ';
						elgg.fine_uploader.embedContent(output);
					} else {
						// incorrect response, presumably an error has been displayed
						$('.fine_uploader-throbber').hide();
						$('.fine_uploader-wrapper .elgg-form-file-upload').show();
					}
				}
			},
			error: function(xhr, status) {
				// @todo nothing for now
			}
		});

		// this was bubbling up the DOM causing a submission
		event.preventDefault();
		event.stopPropagation();
	};

	/**
	 * Loads content within the lightbox
	 *
	 * @param {Object} event
	 * @return void
	 */
	elgg.fine_uploader.forward = function(event) {
		// make sure container guid is passed
		var url = $(this).attr('href');
		url = elgg.fine_uploader.addContainerGUID(url);

		$('.fine_uploader-wrapper').parent().load(url);
		event.preventDefault();
	};

	/**
	 * Adds the container guid to a URL
	 *
	 * @param {string} url
	 * @return string
	 */
	elgg.fine_uploader.addContainerGUID = function(url) {
		if (url.indexOf('container_guid=') == -1) {
			var guid = $('input[name=fine_uploader_container_guid]').val();
			return url + '?container_guid=' + guid;
		} else {
			return url;
		}
	};

	elgg.register_hook_handler('init', 'system', elgg.fine_uploader.init);
